
RealTimeClock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000554  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000554  000005e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000053  0080006a  0080006a  000005f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000624  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000660  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011b9  00000000  00000000  00000728  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000086b  00000000  00000000  000018e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007e5  00000000  00000000  0000214c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000019c  00000000  00000000  00002934  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006e0  00000000  00000000  00002ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000059f  00000000  00000000  000031b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  0000374f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 a8 01 	jmp	0x350	; 0x350 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e5       	ldi	r30, 0x54	; 84
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 3b       	cpi	r26, 0xBD	; 189
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 89 00 	call	0x112	; 0x112 <main>
  8a:	0c 94 a8 02 	jmp	0x550	; 0x550 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <out_led>:
	m1=m1 >= 3 ? 0:m1;
	
}
void out_led(void)
{
	PORTA ^= (1<<7);
  92:	8b b3       	in	r24, 0x1b	; 27
  94:	80 58       	subi	r24, 0x80	; 128
  96:	8b bb       	out	0x1b, r24	; 27
  98:	08 95       	ret

0000009a <disp_outA>:
	resu = tmu_start_timer(leD,PERIODIC,1000,out_led);
}*/

void disp_outA(void)
{
	disp_out(&sec0,s0);
  9a:	60 91 6d 00 	lds	r22, 0x006D	; 0x80006d <s0>
  9e:	8c ea       	ldi	r24, 0xAC	; 172
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	0e 94 41 01 	call	0x282	; 0x282 <disp_out>
	s0++;
  a6:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <s0>
  aa:	8f 5f       	subi	r24, 0xFF	; 255
	s0=s0 >= MAX_POSSIBLE_VALS ? 0:s0;
  ac:	8a 30       	cpi	r24, 0x0A	; 10
  ae:	08 f0       	brcs	.+2      	; 0xb2 <disp_outA+0x18>
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <s0>
  b6:	08 95       	ret

000000b8 <disp_outB>:
	
}
void disp_outB(void)
{
	disp_out(&sec1,s1);
  b8:	60 91 6c 00 	lds	r22, 0x006C	; 0x80006c <s1>
  bc:	8a e9       	ldi	r24, 0x9A	; 154
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	0e 94 41 01 	call	0x282	; 0x282 <disp_out>
	s1++;
  c4:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <s1>
  c8:	8f 5f       	subi	r24, 0xFF	; 255
	s1=s1 >= 6 ? 0:s1;
  ca:	86 30       	cpi	r24, 0x06	; 6
  cc:	08 f0       	brcs	.+2      	; 0xd0 <disp_outB+0x18>
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <s1>
  d4:	08 95       	ret

000000d6 <disp_outC>:
	
}
void disp_outC(void)
{
	disp_out(&min0,m0);
  d6:	60 91 6b 00 	lds	r22, 0x006B	; 0x80006b <m0>
  da:	8b ea       	ldi	r24, 0xAB	; 171
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0e 94 41 01 	call	0x282	; 0x282 <disp_out>
	m0++;
  e2:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <m0>
  e6:	8f 5f       	subi	r24, 0xFF	; 255
	m0= m0 >= MAX_POSSIBLE_VALS ? 0:m0;
  e8:	8a 30       	cpi	r24, 0x0A	; 10
  ea:	08 f0       	brcs	.+2      	; 0xee <disp_outC+0x18>
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <m0>
  f2:	08 95       	ret

000000f4 <disp_outD>:
	
}
void disp_outD(void)
{
	disp_out(&min1,m1);
  f4:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <__data_end>
  f8:	89 e9       	ldi	r24, 0x99	; 153
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0e 94 41 01 	call	0x282	; 0x282 <disp_out>
	m1++;
 100:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
 104:	8f 5f       	subi	r24, 0xFF	; 255
	m1=m1 >= 3 ? 0:m1;
 106:	83 30       	cpi	r24, 0x03	; 3
 108:	08 f0       	brcs	.+2      	; 0x10c <disp_outD+0x18>
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
 110:	08 95       	ret

00000112 <main>:
void disp_outC(void);
void disp_outD(void);
void out_led(void);
int main(void)
{
	DDRA=0xff;
 112:	8f ef       	ldi	r24, 0xFF	; 255
 114:	8a bb       	out	0x1a, r24	; 26
	DDRB=0xff;
 116:	87 bb       	out	0x17, r24	; 23
	DDRC=0xff;
 118:	84 bb       	out	0x14, r24	; 20
	DDRD=0xff;
 11a:	81 bb       	out	0x11, r24	; 17
seg_errors_t res=NO_ERRORS;
TMU_ErrorTypes resu=NO_ERRORS;
//displays initiation
res = disp_init(_BASE_A ,_COMMON_CATHODE,&sec0);	//bases are as configured in the hw/sim
 11c:	4c ea       	ldi	r20, 0xAC	; 172
 11e:	50 e0       	ldi	r21, 0x00	; 0
 120:	61 e0       	ldi	r22, 0x01	; 1
 122:	89 e3       	ldi	r24, 0x39	; 57
 124:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <disp_init>
res = disp_init(_BASE_B,_COMMON_CATHODE,&sec1);
 128:	4a e9       	ldi	r20, 0x9A	; 154
 12a:	50 e0       	ldi	r21, 0x00	; 0
 12c:	61 e0       	ldi	r22, 0x01	; 1
 12e:	86 e3       	ldi	r24, 0x36	; 54
 130:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <disp_init>
res = disp_init(_BASE_C,_COMMON_CATHODE,&min0);
 134:	4b ea       	ldi	r20, 0xAB	; 171
 136:	50 e0       	ldi	r21, 0x00	; 0
 138:	61 e0       	ldi	r22, 0x01	; 1
 13a:	83 e3       	ldi	r24, 0x33	; 51
 13c:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <disp_init>
res = disp_init(_BASE_D,_COMMON_CATHODE,&min1);
 140:	49 e9       	ldi	r20, 0x99	; 153
 142:	50 e0       	ldi	r21, 0x00	; 0
 144:	61 e0       	ldi	r22, 0x01	; 1
 146:	80 e3       	ldi	r24, 0x30	; 48
 148:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <disp_init>
//timers initiation
resu = tmu_init(5);
 14c:	85 e0       	ldi	r24, 0x05	; 5
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 d5 01 	call	0x3aa	; 0x3aa <tmu_init>
resu = tmu_start_timer(&secondsA,PERIODIC,1200,disp_outA);
 154:	2d e4       	ldi	r18, 0x4D	; 77
 156:	30 e0       	ldi	r19, 0x00	; 0
 158:	40 eb       	ldi	r20, 0xB0	; 176
 15a:	54 e0       	ldi	r21, 0x04	; 4
 15c:	60 e0       	ldi	r22, 0x00	; 0
 15e:	8d ea       	ldi	r24, 0xAD	; 173
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <tmu_start_timer>
resu = tmu_start_timer(&secondsB,PERIODIC,6850,disp_outB);
 166:	2c e5       	ldi	r18, 0x5C	; 92
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	42 ec       	ldi	r20, 0xC2	; 194
 16c:	5a e1       	ldi	r21, 0x1A	; 26
 16e:	60 e0       	ldi	r22, 0x00	; 0
 170:	85 eb       	ldi	r24, 0xB5	; 181
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <tmu_start_timer>
resu = tmu_start_timer(&miutesC,PERIODIC,60000,disp_outC);
 178:	2b e6       	ldi	r18, 0x6B	; 107
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	40 e6       	ldi	r20, 0x60	; 96
 17e:	5a ee       	ldi	r21, 0xEA	; 234
 180:	60 e0       	ldi	r22, 0x00	; 0
 182:	8b e9       	ldi	r24, 0x9B	; 155
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <tmu_start_timer>
resu = tmu_start_timer(&minutesD,PERIODIC,360000,disp_outD);
 18a:	2a e7       	ldi	r18, 0x7A	; 122
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	40 e4       	ldi	r20, 0x40	; 64
 190:	5e e7       	ldi	r21, 0x7E	; 126
 192:	60 e0       	ldi	r22, 0x00	; 0
 194:	83 ea       	ldi	r24, 0xA3	; 163
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <tmu_start_timer>
resu = tmu_start_timer(&leD,PERIODIC,500,out_led);
 19c:	29 e4       	ldi	r18, 0x49	; 73
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	44 ef       	ldi	r20, 0xF4	; 244
 1a2:	51 e0       	ldi	r21, 0x01	; 1
 1a4:	60 e0       	ldi	r22, 0x00	; 0
 1a6:	81 e9       	ldi	r24, 0x91	; 145
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <tmu_start_timer>

resu = disp_reset(&sec0);
 1ae:	8c ea       	ldi	r24, 0xAC	; 172
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <disp_reset>
resu = disp_reset(&sec1);
 1b6:	8a e9       	ldi	r24, 0x9A	; 154
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <disp_reset>
resu = disp_reset(&min0);
 1be:	8b ea       	ldi	r24, 0xAB	; 171
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <disp_reset>
resu = disp_reset(&min1);
 1c6:	89 e9       	ldi	r24, 0x99	; 153
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <disp_reset>

    while (1) 
    {
		resu=tmu_dispatch();
 1ce:	0e 94 53 02 	call	0x4a6	; 0x4a6 <tmu_dispatch>
 1d2:	fd cf       	rjmp	.-6      	; 0x1ce <main+0xbc>

000001d4 <disp_init>:
static ecore_u8 disp_patterns[MAX_POSSIBLE_VALS]={0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F};
	
seg_errors_t disp_init(port_bases_t port_base,disp_types disp_type,ecore_u8 *handler)
{
	seg_errors_t b_ret_val=_NO_ERRORS;
	if(   ((port_base > _MIN_BASE) && (port_base < _MAX_BASE) )&&(handler != NULL))
 1d4:	90 ed       	ldi	r25, 0xD0	; 208
 1d6:	98 0f       	add	r25, r24
 1d8:	9a 30       	cpi	r25, 0x0A	; 10
 1da:	08 f0       	brcs	.+2      	; 0x1de <disp_init+0xa>
 1dc:	4c c0       	rjmp	.+152    	; 0x276 <disp_init+0xa2>
 1de:	41 15       	cp	r20, r1
 1e0:	51 05       	cpc	r21, r1
 1e2:	09 f4       	brne	.+2      	; 0x1e6 <disp_init+0x12>
 1e4:	4a c0       	rjmp	.+148    	; 0x27a <disp_init+0xa6>
	{
		if(handler_counter < MAX_DISP_NO)
 1e6:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <handler_counter>
 1ea:	95 30       	cpi	r25, 0x05	; 5
 1ec:	08 f0       	brcs	.+2      	; 0x1f0 <disp_init+0x1c>
 1ee:	47 c0       	rjmp	.+142    	; 0x27e <disp_init+0xaa>
		{
			if(((a_str_handler_info[handler_counter].Disp_type ==_COMMON_ANODE )||(a_str_handler_info[handler_counter].Disp_type ==_COMMON_CATHODE))&&(a_str_handler_info[handler_counter].Port_base != 0) )
 1f0:	29 2f       	mov	r18, r25
 1f2:	30 e0       	ldi	r19, 0x00	; 0
 1f4:	f9 01       	movw	r30, r18
 1f6:	ee 0f       	add	r30, r30
 1f8:	ff 1f       	adc	r31, r31
 1fa:	e1 59       	subi	r30, 0x91	; 145
 1fc:	ff 4f       	sbci	r31, 0xFF	; 255
 1fe:	70 81       	ld	r23, Z
 200:	72 30       	cpi	r23, 0x02	; 2
 202:	20 f5       	brcc	.+72     	; 0x24c <disp_init+0x78>
 204:	22 0f       	add	r18, r18
 206:	33 1f       	adc	r19, r19
 208:	f9 01       	movw	r30, r18
 20a:	e1 59       	subi	r30, 0x91	; 145
 20c:	ff 4f       	sbci	r31, 0xFF	; 255
 20e:	21 81       	ldd	r18, Z+1	; 0x01
 210:	22 23       	and	r18, r18
 212:	e1 f0       	breq	.+56     	; 0x24c <disp_init+0x78>
 214:	9f 5f       	subi	r25, 0xFF	; 255
 216:	01 c0       	rjmp	.+2      	; 0x21a <disp_init+0x46>
 218:	97 2f       	mov	r25, r23
			{
				while(((a_str_handler_info[handler_counter].Disp_type ==_COMMON_ANODE )||(a_str_handler_info[handler_counter].Disp_type ==_COMMON_CATHODE))&&(a_str_handler_info[handler_counter].Port_base != 0))
 21a:	29 2f       	mov	r18, r25
 21c:	30 e0       	ldi	r19, 0x00	; 0
 21e:	f9 01       	movw	r30, r18
 220:	ee 0f       	add	r30, r30
 222:	ff 1f       	adc	r31, r31
 224:	e1 59       	subi	r30, 0x91	; 145
 226:	ff 4f       	sbci	r31, 0xFF	; 255
 228:	70 81       	ld	r23, Z
 22a:	72 30       	cpi	r23, 0x02	; 2
 22c:	18 f0       	brcs	.+6      	; 0x234 <disp_init+0x60>
 22e:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <handler_counter>
 232:	0c c0       	rjmp	.+24     	; 0x24c <disp_init+0x78>
 234:	71 e0       	ldi	r23, 0x01	; 1
 236:	79 0f       	add	r23, r25
 238:	22 0f       	add	r18, r18
 23a:	33 1f       	adc	r19, r19
 23c:	f9 01       	movw	r30, r18
 23e:	e1 59       	subi	r30, 0x91	; 145
 240:	ff 4f       	sbci	r31, 0xFF	; 255
 242:	21 81       	ldd	r18, Z+1	; 0x01
 244:	21 11       	cpse	r18, r1
 246:	e8 cf       	rjmp	.-48     	; 0x218 <disp_init+0x44>
 248:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <handler_counter>
					handler_counter++;
			}
			*(volatile ecore_u8 *)(port_base+DIRECTION_OFFSET)=0xff;
 24c:	e8 2f       	mov	r30, r24
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	9f ef       	ldi	r25, 0xFF	; 255
 252:	91 83       	std	Z+1, r25	; 0x01
			a_str_handler_info[handler_counter].Disp_type=disp_type;
 254:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <handler_counter>
 258:	e9 2f       	mov	r30, r25
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	ee 0f       	add	r30, r30
 25e:	ff 1f       	adc	r31, r31
 260:	e1 59       	subi	r30, 0x91	; 145
 262:	ff 4f       	sbci	r31, 0xFF	; 255
 264:	60 83       	st	Z, r22
			a_str_handler_info[handler_counter].Port_base =port_base;
 266:	81 83       	std	Z+1, r24	; 0x01
			*handler=handler_counter;
 268:	fa 01       	movw	r30, r20
 26a:	90 83       	st	Z, r25
			handler_counter++;
 26c:	9f 5f       	subi	r25, 0xFF	; 255
 26e:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <handler_counter>
static ecore_u8 handler_counter=0;
static ecore_u8 disp_patterns[MAX_POSSIBLE_VALS]={0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F};
	
seg_errors_t disp_init(port_bases_t port_base,disp_types disp_type,ecore_u8 *handler)
{
	seg_errors_t b_ret_val=_NO_ERRORS;
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	08 95       	ret
			b_ret_val=_MAX_NO_REACHED;
		}
	}
	else
	{
		b_ret_val=_INVALID_HANDLER_OR_BASE_PARAMETERS;
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	08 95       	ret
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	08 95       	ret
			*handler=handler_counter;
			handler_counter++;
		}
		else
		{
			b_ret_val=_MAX_NO_REACHED;
 27e:	83 e0       	ldi	r24, 0x03	; 3
	{
		b_ret_val=_INVALID_HANDLER_OR_BASE_PARAMETERS;
	}

	return b_ret_val;
}
 280:	08 95       	ret

00000282 <disp_out>:

seg_errors_t disp_out(ecore_u8 *handler,ecore_u8 disp_val)
{
	seg_errors_t b_ret_val=_NO_ERRORS;

	if ((handler != NULL)&&(*handler <MAX_DISP_NO)&&(disp_val < MAX_POSSIBLE_VALS))
 282:	00 97       	sbiw	r24, 0x00	; 0
 284:	71 f1       	breq	.+92     	; 0x2e2 <disp_out+0x60>
 286:	fc 01       	movw	r30, r24
 288:	80 81       	ld	r24, Z
 28a:	85 30       	cpi	r24, 0x05	; 5
 28c:	60 f5       	brcc	.+88     	; 0x2e6 <disp_out+0x64>
 28e:	6a 30       	cpi	r22, 0x0A	; 10
 290:	60 f5       	brcc	.+88     	; 0x2ea <disp_out+0x68>
	{
		if(a_str_handler_info[*handler].Port_base != 0)
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	fc 01       	movw	r30, r24
 296:	ee 0f       	add	r30, r30
 298:	ff 1f       	adc	r31, r31
 29a:	e1 59       	subi	r30, 0x91	; 145
 29c:	ff 4f       	sbci	r31, 0xFF	; 255
 29e:	a1 81       	ldd	r26, Z+1	; 0x01
 2a0:	aa 23       	and	r26, r26
 2a2:	29 f1       	breq	.+74     	; 0x2ee <disp_out+0x6c>
		{
			if(a_str_handler_info[*handler].Disp_type == _COMMON_CATHODE)
 2a4:	88 0f       	add	r24, r24
 2a6:	99 1f       	adc	r25, r25
 2a8:	fc 01       	movw	r30, r24
 2aa:	e1 59       	subi	r30, 0x91	; 145
 2ac:	ff 4f       	sbci	r31, 0xFF	; 255
 2ae:	80 81       	ld	r24, Z
 2b0:	81 30       	cpi	r24, 0x01	; 1
 2b2:	51 f4       	brne	.+20     	; 0x2c8 <disp_out+0x46>
			{
				*(volatile ecore_u8 *)(a_str_handler_info[*handler].Port_base + OUTPUT_OFFSET)=disp_patterns[disp_val];
 2b4:	b0 e0       	ldi	r27, 0x00	; 0
 2b6:	e6 2f       	mov	r30, r22
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	e0 5a       	subi	r30, 0xA0	; 160
 2bc:	ff 4f       	sbci	r31, 0xFF	; 255
 2be:	80 81       	ld	r24, Z
 2c0:	12 96       	adiw	r26, 0x02	; 2
 2c2:	8c 93       	st	X, r24
	return b_ret_val;
}

seg_errors_t disp_out(ecore_u8 *handler,ecore_u8 disp_val)
{
	seg_errors_t b_ret_val=_NO_ERRORS;
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	08 95       	ret
		{
			if(a_str_handler_info[*handler].Disp_type == _COMMON_CATHODE)
			{
				*(volatile ecore_u8 *)(a_str_handler_info[*handler].Port_base + OUTPUT_OFFSET)=disp_patterns[disp_val];
			}
			else if(a_str_handler_info[*handler].Disp_type == _COMMON_ANODE )
 2c8:	81 11       	cpse	r24, r1
 2ca:	13 c0       	rjmp	.+38     	; 0x2f2 <disp_out+0x70>
			{
				*(volatile ecore_u8 *)(a_str_handler_info[*handler].Port_base + OUTPUT_OFFSET)=~(disp_patterns[disp_val]);
 2cc:	b0 e0       	ldi	r27, 0x00	; 0
 2ce:	e6 2f       	mov	r30, r22
 2d0:	f0 e0       	ldi	r31, 0x00	; 0
 2d2:	e0 5a       	subi	r30, 0xA0	; 160
 2d4:	ff 4f       	sbci	r31, 0xFF	; 255
 2d6:	80 81       	ld	r24, Z
 2d8:	80 95       	com	r24
 2da:	12 96       	adiw	r26, 0x02	; 2
 2dc:	8c 93       	st	X, r24
	return b_ret_val;
}

seg_errors_t disp_out(ecore_u8 *handler,ecore_u8 disp_val)
{
	seg_errors_t b_ret_val=_NO_ERRORS;
 2de:	80 e0       	ldi	r24, 0x00	; 0
 2e0:	08 95       	ret
		}

	}
	else
	{
		b_ret_val=_INVALID_HANDLER_OR_VAL_PARMETERS;
 2e2:	84 e0       	ldi	r24, 0x04	; 4
 2e4:	08 95       	ret
 2e6:	84 e0       	ldi	r24, 0x04	; 4
 2e8:	08 95       	ret
 2ea:	84 e0       	ldi	r24, 0x04	; 4
 2ec:	08 95       	ret
				b_ret_val=_MODULE_NOT_INITIALIZED;
			}
		}
		else
		{
			b_ret_val=_MODULE_NOT_INITIALIZED;
 2ee:	85 e0       	ldi	r24, 0x05	; 5
 2f0:	08 95       	ret
			{
				*(volatile ecore_u8 *)(a_str_handler_info[*handler].Port_base + OUTPUT_OFFSET)=~(disp_patterns[disp_val]);
			}
			else
			{
				b_ret_val=_MODULE_NOT_INITIALIZED;
 2f2:	85 e0       	ldi	r24, 0x05	; 5
	else
	{
		b_ret_val=_INVALID_HANDLER_OR_VAL_PARMETERS;
	}
return b_ret_val;
}
 2f4:	08 95       	ret

000002f6 <disp_reset>:


seg_errors_t disp_reset(ecore_u8 *handler)//writes zero on the display
{
	seg_errors_t b_ret_val=_NO_ERRORS;
	if((handler != NULL)&&(*handler < MAX_DISP_NO))
 2f6:	00 97       	sbiw	r24, 0x00	; 0
 2f8:	19 f1       	breq	.+70     	; 0x340 <disp_reset+0x4a>
 2fa:	fc 01       	movw	r30, r24
 2fc:	80 81       	ld	r24, Z
 2fe:	85 30       	cpi	r24, 0x05	; 5
 300:	08 f5       	brcc	.+66     	; 0x344 <disp_reset+0x4e>
	{
		if(a_str_handler_info[*handler].Port_base != 0)
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	fc 01       	movw	r30, r24
 306:	ee 0f       	add	r30, r30
 308:	ff 1f       	adc	r31, r31
 30a:	e1 59       	subi	r30, 0x91	; 145
 30c:	ff 4f       	sbci	r31, 0xFF	; 255
 30e:	21 81       	ldd	r18, Z+1	; 0x01
 310:	22 23       	and	r18, r18
 312:	d1 f0       	breq	.+52     	; 0x348 <disp_reset+0x52>
		{
			if(a_str_handler_info[*handler].Disp_type == _COMMON_CATHODE)
 314:	88 0f       	add	r24, r24
 316:	99 1f       	adc	r25, r25
 318:	fc 01       	movw	r30, r24
 31a:	e1 59       	subi	r30, 0x91	; 145
 31c:	ff 4f       	sbci	r31, 0xFF	; 255
 31e:	80 81       	ld	r24, Z
 320:	81 30       	cpi	r24, 0x01	; 1
 322:	31 f4       	brne	.+12     	; 0x330 <disp_reset+0x3a>
			{
				*(volatile ecore_u8 *)(a_str_handler_info[*handler].Port_base+OUTPUT_OFFSET)=disp_patterns[0];
 324:	e2 2f       	mov	r30, r18
 326:	f0 e0       	ldi	r31, 0x00	; 0
 328:	8f e3       	ldi	r24, 0x3F	; 63
 32a:	82 83       	std	Z+2, r24	; 0x02
}


seg_errors_t disp_reset(ecore_u8 *handler)//writes zero on the display
{
	seg_errors_t b_ret_val=_NO_ERRORS;
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	08 95       	ret
		{
			if(a_str_handler_info[*handler].Disp_type == _COMMON_CATHODE)
			{
				*(volatile ecore_u8 *)(a_str_handler_info[*handler].Port_base+OUTPUT_OFFSET)=disp_patterns[0];
			}
			else if(a_str_handler_info[*handler].Disp_type == _COMMON_ANODE)
 330:	81 11       	cpse	r24, r1
 332:	0c c0       	rjmp	.+24     	; 0x34c <disp_reset+0x56>
			{
				*(volatile ecore_u8*)(a_str_handler_info[*handler].Port_base+OUTPUT_OFFSET)=~(disp_patterns[0]);
 334:	e2 2f       	mov	r30, r18
 336:	f0 e0       	ldi	r31, 0x00	; 0
 338:	80 ec       	ldi	r24, 0xC0	; 192
 33a:	82 83       	std	Z+2, r24	; 0x02
}


seg_errors_t disp_reset(ecore_u8 *handler)//writes zero on the display
{
	seg_errors_t b_ret_val=_NO_ERRORS;
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	08 95       	ret
			b_ret_val =_MODULE_NOT_INITIALIZED;
		}
	}
	else
	{
		b_ret_val=_INVALID_HANDLER_OR_BASE_PARAMETERS;
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	08 95       	ret
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	08 95       	ret
			}

		}
		else
		{
			b_ret_val =_MODULE_NOT_INITIALIZED;
 348:	85 e0       	ldi	r24, 0x05	; 5
 34a:	08 95       	ret
			{
				*(volatile ecore_u8*)(a_str_handler_info[*handler].Port_base+OUTPUT_OFFSET)=~(disp_patterns[0]);
			}
			else
			{
				b_ret_val =_MODULE_NOT_INITIALIZED;
 34c:	85 e0       	ldi	r24, 0x05	; 5
	else
	{
		b_ret_val=_INVALID_HANDLER_OR_BASE_PARAMETERS;
	}
	return b_ret_val;
}
 34e:	08 95       	ret

00000350 <__vector_10>:
//static ecore_u32 MAIN_COUNTER=0;
static bool_t tmu_initiated=E_FALSE;
static ecore_u16 tmu_Resolution=0 ;

ISR(TIMER0_COMP_vect)
{
 350:	1f 92       	push	r1
 352:	0f 92       	push	r0
 354:	0f b6       	in	r0, 0x3f	; 63
 356:	0f 92       	push	r0
 358:	11 24       	eor	r1, r1
 35a:	2f 93       	push	r18
 35c:	3f 93       	push	r19
 35e:	8f 93       	push	r24
 360:	9f 93       	push	r25
 362:	af 93       	push	r26
 364:	bf 93       	push	r27
 366:	ef 93       	push	r30
 368:	ff 93       	push	r31
 36a:	ad e7       	ldi	r26, 0x7D	; 125
 36c:	b0 e0       	ldi	r27, 0x00	; 0
 36e:	21 e9       	ldi	r18, 0x91	; 145
 370:	30 e0       	ldi	r19, 0x00	; 0
	for (ecore_u8 i=0; i<MAX_TIMERS_NO; i++)
	{
		if (tmu_internal_bufer[i])	//if there is a valid address process else skip
 372:	ed 91       	ld	r30, X+
 374:	fd 91       	ld	r31, X+
 376:	30 97       	sbiw	r30, 0x00	; 0
 378:	29 f0       	breq	.+10     	; 0x384 <__vector_10+0x34>
		{
			tmu_internal_bufer[i]->remaining_time--;			
 37a:	82 81       	ldd	r24, Z+2	; 0x02
 37c:	93 81       	ldd	r25, Z+3	; 0x03
 37e:	01 97       	sbiw	r24, 0x01	; 1
 380:	93 83       	std	Z+3, r25	; 0x03
 382:	82 83       	std	Z+2, r24	; 0x02
static bool_t tmu_initiated=E_FALSE;
static ecore_u16 tmu_Resolution=0 ;

ISR(TIMER0_COMP_vect)
{
	for (ecore_u8 i=0; i<MAX_TIMERS_NO; i++)
 384:	a2 17       	cp	r26, r18
 386:	b3 07       	cpc	r27, r19
 388:	a1 f7       	brne	.-24     	; 0x372 <__vector_10+0x22>
		{
			tmu_internal_bufer[i]->remaining_time--;			
		}
		
	}
	TCNT0=0;
 38a:	12 be       	out	0x32, r1	; 50
	OCR0=78;
 38c:	8e e4       	ldi	r24, 0x4E	; 78
 38e:	8c bf       	out	0x3c, r24	; 60
	//sei();											//NoDifference
}
 390:	ff 91       	pop	r31
 392:	ef 91       	pop	r30
 394:	bf 91       	pop	r27
 396:	af 91       	pop	r26
 398:	9f 91       	pop	r25
 39a:	8f 91       	pop	r24
 39c:	3f 91       	pop	r19
 39e:	2f 91       	pop	r18
 3a0:	0f 90       	pop	r0
 3a2:	0f be       	out	0x3f, r0	; 63
 3a4:	0f 90       	pop	r0
 3a6:	1f 90       	pop	r1
 3a8:	18 95       	reti

000003aa <tmu_init>:

TMU_ErrorTypes tmu_init(ecore_u16 resolution)
{
 3aa:	ed e7       	ldi	r30, 0x7D	; 125
 3ac:	f0 e0       	ldi	r31, 0x00	; 0
 3ae:	21 e9       	ldi	r18, 0x91	; 145
 3b0:	30 e0       	ldi	r19, 0x00	; 0
	for(int i = 0; i < MAX_TIMERS_NO; i++) 
	{
		tmu_internal_bufer[i] = NULL;
 3b2:	11 92       	st	Z+, r1
 3b4:	11 92       	st	Z+, r1
	//sei();											//NoDifference
}

TMU_ErrorTypes tmu_init(ecore_u16 resolution)
{
	for(int i = 0; i < MAX_TIMERS_NO; i++) 
 3b6:	e2 17       	cp	r30, r18
 3b8:	f3 07       	cpc	r31, r19
 3ba:	d9 f7       	brne	.-10     	; 0x3b2 <tmu_init+0x8>
	{
		tmu_internal_bufer[i] = NULL;
	}
	TMU_ErrorTypes s_ret_val=NO_ERRORS;
	tmu_Resolution=resolution;
 3bc:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <tmu_Resolution+0x1>
 3c0:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <tmu_Resolution>
	tmu_initiated=E_TRUE;
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <tmu_initiated>
	//null the internal buffer...think about it
	TCCR0=0x03;
 3ca:	83 e0       	ldi	r24, 0x03	; 3
 3cc:	83 bf       	out	0x33, r24	; 51
	TCNT0=0;
 3ce:	12 be       	out	0x32, r1	; 50
	OCR0=78;
 3d0:	8e e4       	ldi	r24, 0x4E	; 78
 3d2:	8c bf       	out	0x3c, r24	; 60
	TIMSK=1<<1;
 3d4:	82 e0       	ldi	r24, 0x02	; 2
 3d6:	89 bf       	out	0x39, r24	; 57
	TIFR |=1;
 3d8:	88 b7       	in	r24, 0x38	; 56
 3da:	81 60       	ori	r24, 0x01	; 1
 3dc:	88 bf       	out	0x38, r24	; 56
	sei();
 3de:	78 94       	sei
	return s_ret_val;
}
 3e0:	80 e0       	ldi	r24, 0x00	; 0
 3e2:	08 95       	ret

000003e4 <tmu_start_timer>:

TMU_ErrorTypes tmu_start_timer(TMU_STR_ELEMENT *obj,Timer_Type timer_Type,ecore_u16 timer_Period,void (*CB_func)(void))
{
 3e4:	cf 93       	push	r28
 3e6:	df 93       	push	r29
 3e8:	fc 01       	movw	r30, r24
 3ea:	c6 2f       	mov	r28, r22
	cli();
 3ec:	f8 94       	cli
	TMU_ErrorTypes s_ret_val=NO_ERRORS;
		if( (tmu_initiated == E_TRUE) )
 3ee:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <tmu_initiated>
 3f2:	91 30       	cpi	r25, 0x01	; 1
 3f4:	91 f5       	brne	.+100    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
		{
			if (tmu_internal_bufer_counter < MAX_TIMERS_NO )
 3f6:	d0 91 7c 00 	lds	r29, 0x007C	; 0x80007c <tmu_internal_bufer_counter>
 3fa:	da 30       	cpi	r29, 0x0A	; 10
 3fc:	50 f5       	brcc	.+84     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
			{
				if ( (obj != NULL) && ( (timer_Type == PERIODIC) || (timer_Type == ONESHOOT) ) && (timer_Period != 0) && (CB_func != NULL) )
 3fe:	30 97       	sbiw	r30, 0x00	; 0
 400:	21 f1       	breq	.+72     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 402:	62 30       	cpi	r22, 0x02	; 2
 404:	10 f5       	brcc	.+68     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 406:	41 15       	cp	r20, r1
 408:	51 05       	cpc	r21, r1
 40a:	f9 f0       	breq	.+62     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 40c:	21 15       	cp	r18, r1
 40e:	31 05       	cpc	r19, r1
 410:	e1 f0       	breq	.+56     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
				{
					obj->func_CB=CB_func;
 412:	31 83       	std	Z+1, r19	; 0x01
 414:	20 83       	st	Z, r18
					obj->period=timer_Period/tmu_Resolution;	//so the user may set it every one msec. or five msec.s //test it work and rethink later
 416:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <tmu_Resolution>
 41a:	70 91 7a 00 	lds	r23, 0x007A	; 0x80007a <tmu_Resolution+0x1>
 41e:	ca 01       	movw	r24, r20
 420:	0e 94 94 02 	call	0x528	; 0x528 <__udivmodhi4>
 424:	75 83       	std	Z+5, r23	; 0x05
 426:	64 83       	std	Z+4, r22	; 0x04
					obj->remaining_time=obj->period;
 428:	73 83       	std	Z+3, r23	; 0x03
 42a:	62 83       	std	Z+2, r22	; 0x02
					obj->timer_type=timer_Type;
 42c:	c6 83       	std	Z+6, r28	; 0x06
					obj->index=tmu_internal_bufer_counter;
 42e:	d7 83       	std	Z+7, r29	; 0x07
					tmu_internal_bufer[tmu_internal_bufer_counter]=obj;
 430:	ad 2f       	mov	r26, r29
 432:	b0 e0       	ldi	r27, 0x00	; 0
 434:	aa 0f       	add	r26, r26
 436:	bb 1f       	adc	r27, r27
 438:	a3 58       	subi	r26, 0x83	; 131
 43a:	bf 4f       	sbci	r27, 0xFF	; 255
 43c:	ed 93       	st	X+, r30
 43e:	fc 93       	st	X, r31
					tmu_internal_bufer_counter++;
 440:	df 5f       	subi	r29, 0xFF	; 255
 442:	d0 93 7c 00 	sts	0x007C, r29	; 0x80007c <tmu_internal_bufer_counter>
}

TMU_ErrorTypes tmu_start_timer(TMU_STR_ELEMENT *obj,Timer_Type timer_Type,ecore_u16 timer_Period,void (*CB_func)(void))
{
	cli();
	TMU_ErrorTypes s_ret_val=NO_ERRORS;
 446:	80 e0       	ldi	r24, 0x00	; 0
					obj->period=timer_Period/tmu_Resolution;	//so the user may set it every one msec. or five msec.s //test it work and rethink later
					obj->remaining_time=obj->period;
					obj->timer_type=timer_Type;
					obj->index=tmu_internal_bufer_counter;
					tmu_internal_bufer[tmu_internal_bufer_counter]=obj;
					tmu_internal_bufer_counter++;
 448:	0b c0       	rjmp	.+22     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
				} 
				else
				{
					PORTD=0x3;
 44a:	83 e0       	ldi	r24, 0x03	; 3
 44c:	82 bb       	out	0x12, r24	; 18
					s_ret_val=INVALID_PARAMS;
 44e:	82 e0       	ldi	r24, 0x02	; 2
 450:	07 c0       	rjmp	.+14     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
				}
				
			} 
			else
			{
					PORTD=0x7;
 452:	87 e0       	ldi	r24, 0x07	; 7
 454:	82 bb       	out	0x12, r24	; 18
				s_ret_val=MAX_NO_REACHED;
 456:	83 e0       	ldi	r24, 0x03	; 3
 458:	03 c0       	rjmp	.+6      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
			}

		}
		else
		{
					PORTD=0x7;
 45a:	87 e0       	ldi	r24, 0x07	; 7
 45c:	82 bb       	out	0x12, r24	; 18
			s_ret_val=TIMER_NOT_INITIATED;
 45e:	81 e0       	ldi	r24, 0x01	; 1
		}
	sei();
 460:	78 94       	sei
	return s_ret_val;
}
 462:	df 91       	pop	r29
 464:	cf 91       	pop	r28
 466:	08 95       	ret

00000468 <tmu_stop_timer>:
TMU_ErrorTypes tmu_stop_timer(TMU_STR_ELEMENT *obj)
{
 468:	fc 01       	movw	r30, r24
	cli();
 46a:	f8 94       	cli
		TMU_ErrorTypes s_ret_val=NO_ERRORS;
		if (obj != NULL)
 46c:	89 2b       	or	r24, r25
 46e:	c1 f0       	breq	.+48     	; 0x4a0 <tmu_stop_timer+0x38>
		{
			obj->func_CB=NULL;
 470:	11 82       	std	Z+1, r1	; 0x01
 472:	10 82       	st	Z, r1
			obj->period=0;
 474:	15 82       	std	Z+5, r1	; 0x05
 476:	14 82       	std	Z+4, r1	; 0x04
			obj->remaining_time=0;
 478:	13 82       	std	Z+3, r1	; 0x03
 47a:	12 82       	std	Z+2, r1	; 0x02
			obj->timer_type=INVALID_TYPE;
 47c:	82 e0       	ldi	r24, 0x02	; 2
 47e:	86 83       	std	Z+6, r24	; 0x06
			tmu_internal_bufer[obj->index]=NULL;
 480:	a7 81       	ldd	r26, Z+7	; 0x07
 482:	b0 e0       	ldi	r27, 0x00	; 0
 484:	aa 0f       	add	r26, r26
 486:	bb 1f       	adc	r27, r27
 488:	a3 58       	subi	r26, 0x83	; 131
 48a:	bf 4f       	sbci	r27, 0xFF	; 255
 48c:	1d 92       	st	X+, r1
 48e:	1c 92       	st	X, r1
			obj->index=0;		
 490:	17 82       	std	Z+7, r1	; 0x07
			tmu_internal_bufer_counter--;
 492:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <tmu_internal_bufer_counter>
 496:	81 50       	subi	r24, 0x01	; 1
 498:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <tmu_internal_bufer_counter>
	return s_ret_val;
}
TMU_ErrorTypes tmu_stop_timer(TMU_STR_ELEMENT *obj)
{
	cli();
		TMU_ErrorTypes s_ret_val=NO_ERRORS;
 49c:	80 e0       	ldi	r24, 0x00	; 0
 49e:	01 c0       	rjmp	.+2      	; 0x4a2 <tmu_stop_timer+0x3a>
			obj->index=0;		
			tmu_internal_bufer_counter--;
		} 
		else
		{
			s_ret_val=INVALID_PARAMS;
 4a0:	82 e0       	ldi	r24, 0x02	; 2
		}
	sei();
 4a2:	78 94       	sei
	return s_ret_val;

}
 4a4:	08 95       	ret

000004a6 <tmu_dispatch>:
TMU_ErrorTypes tmu_dispatch(void)
{
 4a6:	ef 92       	push	r14
 4a8:	ff 92       	push	r15
 4aa:	0f 93       	push	r16
 4ac:	1f 93       	push	r17
 4ae:	cf 93       	push	r28
 4b0:	df 93       	push	r29
	cli();
 4b2:	f8 94       	cli
		TMU_ErrorTypes s_ret_val=NO_ERRORS;
		if (tmu_initiated)
 4b4:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <tmu_initiated>
 4b8:	88 23       	and	r24, r24
 4ba:	69 f1       	breq	.+90     	; 0x516 <tmu_dispatch+0x70>
 4bc:	cd e7       	ldi	r28, 0x7D	; 125
 4be:	d0 e0       	ldi	r29, 0x00	; 0
 4c0:	0f 2e       	mov	r0, r31
 4c2:	f1 e9       	ldi	r31, 0x91	; 145
 4c4:	ef 2e       	mov	r14, r31
 4c6:	f0 e0       	ldi	r31, 0x00	; 0
 4c8:	ff 2e       	mov	r15, r31
 4ca:	f0 2d       	mov	r31, r0
		{
			for (ecore_u8 i=0; i<MAX_TIMERS_NO; i++)
			{
				if (tmu_internal_bufer[i])	//if there is a valid address process else skip
 4cc:	e8 81       	ld	r30, Y
 4ce:	f9 81       	ldd	r31, Y+1	; 0x01
 4d0:	30 97       	sbiw	r30, 0x00	; 0
 4d2:	d9 f0       	breq	.+54     	; 0x50a <tmu_dispatch+0x64>
				{
					if( (tmu_internal_bufer[i]->remaining_time) <= 0)
 4d4:	82 81       	ldd	r24, Z+2	; 0x02
 4d6:	93 81       	ldd	r25, Z+3	; 0x03
 4d8:	18 16       	cp	r1, r24
 4da:	19 06       	cpc	r1, r25
 4dc:	b4 f0       	brlt	.+44     	; 0x50a <tmu_dispatch+0x64>
					{
						//PORTD=tmu_internal_bufer[0]->remaining_time;
						tmu_internal_bufer[i]->func_CB();
 4de:	01 90       	ld	r0, Z+
 4e0:	f0 81       	ld	r31, Z
 4e2:	e0 2d       	mov	r30, r0
 4e4:	09 95       	icall
						tmu_internal_bufer[i]->remaining_time+=tmu_internal_bufer[i]->period;
 4e6:	e8 81       	ld	r30, Y
 4e8:	f9 81       	ldd	r31, Y+1	; 0x01
 4ea:	22 81       	ldd	r18, Z+2	; 0x02
 4ec:	33 81       	ldd	r19, Z+3	; 0x03
 4ee:	84 81       	ldd	r24, Z+4	; 0x04
 4f0:	95 81       	ldd	r25, Z+5	; 0x05
 4f2:	82 0f       	add	r24, r18
 4f4:	93 1f       	adc	r25, r19
 4f6:	93 83       	std	Z+3, r25	; 0x03
 4f8:	82 83       	std	Z+2, r24	; 0x02
						if( tmu_internal_bufer[i]->timer_type == ONESHOOT)
 4fa:	e8 81       	ld	r30, Y
 4fc:	f9 81       	ldd	r31, Y+1	; 0x01
 4fe:	86 81       	ldd	r24, Z+6	; 0x06
 500:	81 30       	cpi	r24, 0x01	; 1
 502:	19 f4       	brne	.+6      	; 0x50a <tmu_dispatch+0x64>
						tmu_stop_timer(tmu_internal_bufer[i]);
 504:	cf 01       	movw	r24, r30
 506:	0e 94 34 02 	call	0x468	; 0x468 <tmu_stop_timer>
 50a:	22 96       	adiw	r28, 0x02	; 2
{
	cli();
		TMU_ErrorTypes s_ret_val=NO_ERRORS;
		if (tmu_initiated)
		{
			for (ecore_u8 i=0; i<MAX_TIMERS_NO; i++)
 50c:	ce 15       	cp	r28, r14
 50e:	df 05       	cpc	r29, r15
 510:	e9 f6       	brne	.-70     	; 0x4cc <tmu_dispatch+0x26>

}
TMU_ErrorTypes tmu_dispatch(void)
{
	cli();
		TMU_ErrorTypes s_ret_val=NO_ERRORS;
 512:	80 e0       	ldi	r24, 0x00	; 0
 514:	01 c0       	rjmp	.+2      	; 0x518 <tmu_dispatch+0x72>
			}
		
		}
		else
		{
			s_ret_val=TIMER_NOT_INITIATED;
 516:	81 e0       	ldi	r24, 0x01	; 1
		}
	sei();
 518:	78 94       	sei
	return s_ret_val;
}
 51a:	df 91       	pop	r29
 51c:	cf 91       	pop	r28
 51e:	1f 91       	pop	r17
 520:	0f 91       	pop	r16
 522:	ff 90       	pop	r15
 524:	ef 90       	pop	r14
 526:	08 95       	ret

00000528 <__udivmodhi4>:
 528:	aa 1b       	sub	r26, r26
 52a:	bb 1b       	sub	r27, r27
 52c:	51 e1       	ldi	r21, 0x11	; 17
 52e:	07 c0       	rjmp	.+14     	; 0x53e <__udivmodhi4_ep>

00000530 <__udivmodhi4_loop>:
 530:	aa 1f       	adc	r26, r26
 532:	bb 1f       	adc	r27, r27
 534:	a6 17       	cp	r26, r22
 536:	b7 07       	cpc	r27, r23
 538:	10 f0       	brcs	.+4      	; 0x53e <__udivmodhi4_ep>
 53a:	a6 1b       	sub	r26, r22
 53c:	b7 0b       	sbc	r27, r23

0000053e <__udivmodhi4_ep>:
 53e:	88 1f       	adc	r24, r24
 540:	99 1f       	adc	r25, r25
 542:	5a 95       	dec	r21
 544:	a9 f7       	brne	.-22     	; 0x530 <__udivmodhi4_loop>
 546:	80 95       	com	r24
 548:	90 95       	com	r25
 54a:	bc 01       	movw	r22, r24
 54c:	cd 01       	movw	r24, r26
 54e:	08 95       	ret

00000550 <_exit>:
 550:	f8 94       	cli

00000552 <__stop_program>:
 552:	ff cf       	rjmp	.-2      	; 0x552 <__stop_program>
