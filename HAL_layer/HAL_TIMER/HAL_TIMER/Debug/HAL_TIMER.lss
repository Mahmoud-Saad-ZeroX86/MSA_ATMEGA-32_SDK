
HAL_TIMER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000031a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  0000031a  000003ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080006a  0080006a  000003b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ccf  00000000  00000000  0000049c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000763  00000000  00000000  0000116b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006f3  00000000  00000000  000018ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  00001fc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e7  00000000  00000000  000020d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005f4  00000000  00000000  000026bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002cb3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 aa 00 	jmp	0x154	; 0x154 <__vector_10>
  2c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e1       	ldi	r30, 0x1A	; 26
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 36       	cpi	r26, 0x6C	; 108
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 8b 01 	jmp	0x316	; 0x316 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
//add_freqs(timer_object *obj);
	static timer_object timer_test={TIMER_0,NORMAL_MODE,NO_PRESCALER,OC0_DISCONNECTED,0x00,75,NON_INTERRUPTABLE};
	
int main(void)
{
	sei();
  92:	78 94       	sei
	ecore_u16 timer_comp_val;
	sys_interrupt_mode int_mode;
	//void (*pf_timer_cb)(void);
}timer_object;
	*/
	timer_error_types res= init_timer(&timer_test);
  94:	80 e6       	ldi	r24, 0x60	; 96
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	0e 94 c1 00 	call	0x182	; 0x182 <init_timer>
	DDRA=0xff;
  9c:	8f ef       	ldi	r24, 0xFF	; 255
  9e:	8a bb       	out	0x1a, r24	; 26
	DDRD=0xff;
  a0:	81 bb       	out	0x11, r24	; 17
	DDRC=0xff;
  a2:	84 bb       	out	0x14, r24	; 20
    while (1) 
    {
		PORTA^=0xff;
  a4:	8b b3       	in	r24, 0x1b	; 27
  a6:	80 95       	com	r24
  a8:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	83 e2       	ldi	r24, 0x23	; 35
  ac:	94 ef       	ldi	r25, 0xF4	; 244
  ae:	01 97       	sbiw	r24, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <main+0x1c>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <main+0x22>
  b4:	00 00       	nop
  b6:	f6 cf       	rjmp	.-20     	; 0xa4 <main+0x12>

000000b8 <__vector_11>:
timer_error_types read_timer_val(timer_object *given_obj,ecore_u16 *val);
timer_error_types update_timer(timer_object *given_obj,ecore_u8 *val);
timer_error_types update_comp_timer(timer_object *given_obj,ecore_u8 *val);
timer_error_types deinit_timer(timer_object *given_obj);*/
ISR(TIMER0_OVF_vect)
{static ecore_u16 temp=0;
  b8:	1f 92       	push	r1
  ba:	0f 92       	push	r0
  bc:	0f b6       	in	r0, 0x3f	; 63
  be:	0f 92       	push	r0
  c0:	11 24       	eor	r1, r1
  c2:	2f 93       	push	r18
  c4:	3f 93       	push	r19
  c6:	4f 93       	push	r20
  c8:	5f 93       	push	r21
  ca:	6f 93       	push	r22
  cc:	7f 93       	push	r23
  ce:	8f 93       	push	r24
  d0:	9f 93       	push	r25
  d2:	af 93       	push	r26
  d4:	bf 93       	push	r27
  d6:	ef 93       	push	r30
  d8:	ff 93       	push	r31
	temp++;
  da:	40 91 6a 00 	lds	r20, 0x006A	; 0x80006a <__data_end>
  de:	50 91 6b 00 	lds	r21, 0x006B	; 0x80006b <__data_end+0x1>
  e2:	4f 5f       	subi	r20, 0xFF	; 255
  e4:	5f 4f       	sbci	r21, 0xFF	; 255
  e6:	50 93 6b 00 	sts	0x006B, r21	; 0x80006b <__data_end+0x1>
  ea:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__data_end>
	if(temp %5)
  ee:	9a 01       	movw	r18, r20
  f0:	ad ec       	ldi	r26, 0xCD	; 205
  f2:	bc ec       	ldi	r27, 0xCC	; 204
  f4:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <__umulhisi3>
  f8:	96 95       	lsr	r25
  fa:	87 95       	ror	r24
  fc:	96 95       	lsr	r25
  fe:	87 95       	ror	r24
 100:	9c 01       	movw	r18, r24
 102:	22 0f       	add	r18, r18
 104:	33 1f       	adc	r19, r19
 106:	22 0f       	add	r18, r18
 108:	33 1f       	adc	r19, r19
 10a:	82 0f       	add	r24, r18
 10c:	93 1f       	adc	r25, r19
 10e:	48 17       	cp	r20, r24
 110:	59 07       	cpc	r21, r25
 112:	31 f0       	breq	.+12     	; 0x120 <__vector_11+0x68>
	update_timer(&timer_test,&temp);
 114:	6a e6       	ldi	r22, 0x6A	; 106
 116:	70 e0       	ldi	r23, 0x00	; 0
 118:	80 e6       	ldi	r24, 0x60	; 96
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 64 01 	call	0x2c8	; 0x2c8 <update_timer>
 120:	83 e2       	ldi	r24, 0x23	; 35
 122:	94 ef       	ldi	r25, 0xF4	; 244
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <__vector_11+0x6c>
 128:	00 c0       	rjmp	.+0      	; 0x12a <__vector_11+0x72>
 12a:	00 00       	nop
	_delay_ms(250);
	PORTC^=0xff;
 12c:	85 b3       	in	r24, 0x15	; 21
 12e:	80 95       	com	r24
 130:	85 bb       	out	0x15, r24	; 21
}
 132:	ff 91       	pop	r31
 134:	ef 91       	pop	r30
 136:	bf 91       	pop	r27
 138:	af 91       	pop	r26
 13a:	9f 91       	pop	r25
 13c:	8f 91       	pop	r24
 13e:	7f 91       	pop	r23
 140:	6f 91       	pop	r22
 142:	5f 91       	pop	r21
 144:	4f 91       	pop	r20
 146:	3f 91       	pop	r19
 148:	2f 91       	pop	r18
 14a:	0f 90       	pop	r0
 14c:	0f be       	out	0x3f, r0	; 63
 14e:	0f 90       	pop	r0
 150:	1f 90       	pop	r1
 152:	18 95       	reti

00000154 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
 154:	1f 92       	push	r1
 156:	0f 92       	push	r0
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	0f 92       	push	r0
 15c:	11 24       	eor	r1, r1
 15e:	8f 93       	push	r24
 160:	9f 93       	push	r25
 162:	83 e2       	ldi	r24, 0x23	; 35
 164:	94 ef       	ldi	r25, 0xF4	; 244
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <__vector_10+0x12>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <__vector_10+0x18>
 16c:	00 00       	nop
	_delay_ms(250);
	PORTD^=0xff;
 16e:	82 b3       	in	r24, 0x12	; 18
 170:	80 95       	com	r24
 172:	82 bb       	out	0x12, r24	; 18
}
 174:	9f 91       	pop	r25
 176:	8f 91       	pop	r24
 178:	0f 90       	pop	r0
 17a:	0f be       	out	0x3f, r0	; 63
 17c:	0f 90       	pop	r0
 17e:	1f 90       	pop	r1
 180:	18 95       	reti

00000182 <init_timer>:
	else
	{
		ret_val=INVALID_PARAMS;
	}
	return ret_val;
}
 182:	fc 01       	movw	r30, r24
 184:	89 2b       	or	r24, r25
 186:	09 f4       	brne	.+2      	; 0x18a <init_timer+0x8>
 188:	93 c0       	rjmp	.+294    	; 0x2b0 <init_timer+0x12e>
 18a:	a0 81       	ld	r26, Z
 18c:	b0 e0       	ldi	r27, 0x00	; 0
 18e:	9c 91       	ld	r25, X
 190:	41 81       	ldd	r20, Z+1	; 0x01
 192:	84 2f       	mov	r24, r20
 194:	82 70       	andi	r24, 0x02	; 2
 196:	88 0f       	add	r24, r24
 198:	88 0f       	add	r24, r24
 19a:	89 2b       	or	r24, r25
 19c:	24 2f       	mov	r18, r20
 19e:	21 70       	andi	r18, 0x01	; 1
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	00 24       	eor	r0, r0
 1a4:	36 95       	lsr	r19
 1a6:	27 95       	ror	r18
 1a8:	07 94       	ror	r0
 1aa:	36 95       	lsr	r19
 1ac:	27 95       	ror	r18
 1ae:	07 94       	ror	r0
 1b0:	32 2f       	mov	r19, r18
 1b2:	20 2d       	mov	r18, r0
 1b4:	28 2b       	or	r18, r24
 1b6:	2c 93       	st	X, r18
 1b8:	a0 81       	ld	r26, Z
 1ba:	b0 e0       	ldi	r27, 0x00	; 0
 1bc:	2c 91       	ld	r18, X
 1be:	93 81       	ldd	r25, Z+3	; 0x03
 1c0:	30 e1       	ldi	r19, 0x10	; 16
 1c2:	93 9f       	mul	r25, r19
 1c4:	c0 01       	movw	r24, r0
 1c6:	11 24       	eor	r1, r1
 1c8:	82 2b       	or	r24, r18
 1ca:	8c 93       	st	X, r24
 1cc:	a0 81       	ld	r26, Z
 1ce:	b0 e0       	ldi	r27, 0x00	; 0
 1d0:	9c 91       	ld	r25, X
 1d2:	82 81       	ldd	r24, Z+2	; 0x02
 1d4:	89 2b       	or	r24, r25
 1d6:	8c 93       	st	X, r24
 1d8:	80 81       	ld	r24, Z
 1da:	83 35       	cpi	r24, 0x53	; 83
 1dc:	a1 f5       	brne	.+104    	; 0x246 <init_timer+0xc4>
 1de:	84 81       	ldd	r24, Z+4	; 0x04
 1e0:	82 bf       	out	0x32, r24	; 50
 1e2:	86 81       	ldd	r24, Z+6	; 0x06
 1e4:	8c bf       	out	0x3c, r24	; 60
 1e6:	81 81       	ldd	r24, Z+1	; 0x01
 1e8:	81 11       	cpse	r24, r1
 1ea:	1b c0       	rjmp	.+54     	; 0x222 <init_timer+0xa0>
 1ec:	80 85       	ldd	r24, Z+8	; 0x08
 1ee:	81 32       	cpi	r24, 0x21	; 33
 1f0:	29 f4       	brne	.+10     	; 0x1fc <init_timer+0x7a>
 1f2:	89 b7       	in	r24, 0x39	; 57
 1f4:	81 60       	ori	r24, 0x01	; 1
 1f6:	89 bf       	out	0x39, r24	; 57
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	08 95       	ret
 1fc:	82 32       	cpi	r24, 0x22	; 34
 1fe:	29 f4       	brne	.+10     	; 0x20a <init_timer+0x88>
 200:	89 b7       	in	r24, 0x39	; 57
 202:	82 60       	ori	r24, 0x02	; 2
 204:	89 bf       	out	0x39, r24	; 57
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	08 95       	ret
 20a:	83 32       	cpi	r24, 0x23	; 35
 20c:	29 f4       	brne	.+10     	; 0x218 <init_timer+0x96>
 20e:	89 b7       	in	r24, 0x39	; 57
 210:	83 60       	ori	r24, 0x03	; 3
 212:	89 bf       	out	0x39, r24	; 57
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	08 95       	ret
 218:	89 b7       	in	r24, 0x39	; 57
 21a:	8c 7f       	andi	r24, 0xFC	; 252
 21c:	89 bf       	out	0x39, r24	; 57
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	08 95       	ret
 222:	80 85       	ldd	r24, Z+8	; 0x08
 224:	81 32       	cpi	r24, 0x21	; 33
 226:	09 f4       	brne	.+2      	; 0x22a <init_timer+0xa8>
 228:	45 c0       	rjmp	.+138    	; 0x2b4 <init_timer+0x132>
 22a:	82 32       	cpi	r24, 0x22	; 34
 22c:	29 f4       	brne	.+10     	; 0x238 <init_timer+0xb6>
 22e:	89 b7       	in	r24, 0x39	; 57
 230:	82 60       	ori	r24, 0x02	; 2
 232:	89 bf       	out	0x39, r24	; 57
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	08 95       	ret
 238:	83 32       	cpi	r24, 0x23	; 35
 23a:	f1 f1       	breq	.+124    	; 0x2b8 <init_timer+0x136>
 23c:	89 b7       	in	r24, 0x39	; 57
 23e:	8c 7f       	andi	r24, 0xFC	; 252
 240:	89 bf       	out	0x39, r24	; 57
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	08 95       	ret
 246:	85 34       	cpi	r24, 0x45	; 69
 248:	c9 f5       	brne	.+114    	; 0x2bc <init_timer+0x13a>
 24a:	84 81       	ldd	r24, Z+4	; 0x04
 24c:	84 bd       	out	0x24, r24	; 36
 24e:	86 81       	ldd	r24, Z+6	; 0x06
 250:	83 bd       	out	0x23, r24	; 35
 252:	81 81       	ldd	r24, Z+1	; 0x01
 254:	81 11       	cpse	r24, r1
 256:	1b c0       	rjmp	.+54     	; 0x28e <init_timer+0x10c>
 258:	80 85       	ldd	r24, Z+8	; 0x08
 25a:	81 32       	cpi	r24, 0x21	; 33
 25c:	29 f4       	brne	.+10     	; 0x268 <init_timer+0xe6>
 25e:	89 b7       	in	r24, 0x39	; 57
 260:	80 64       	ori	r24, 0x40	; 64
 262:	89 bf       	out	0x39, r24	; 57
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	08 95       	ret
 268:	82 32       	cpi	r24, 0x22	; 34
 26a:	29 f4       	brne	.+10     	; 0x276 <init_timer+0xf4>
 26c:	89 b7       	in	r24, 0x39	; 57
 26e:	80 68       	ori	r24, 0x80	; 128
 270:	89 bf       	out	0x39, r24	; 57
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	08 95       	ret
 276:	83 32       	cpi	r24, 0x23	; 35
 278:	29 f4       	brne	.+10     	; 0x284 <init_timer+0x102>
 27a:	89 b7       	in	r24, 0x39	; 57
 27c:	80 6c       	ori	r24, 0xC0	; 192
 27e:	89 bf       	out	0x39, r24	; 57
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	08 95       	ret
 284:	89 b7       	in	r24, 0x39	; 57
 286:	8f 73       	andi	r24, 0x3F	; 63
 288:	89 bf       	out	0x39, r24	; 57
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	08 95       	ret
 28e:	80 85       	ldd	r24, Z+8	; 0x08
 290:	81 32       	cpi	r24, 0x21	; 33
 292:	b1 f0       	breq	.+44     	; 0x2c0 <init_timer+0x13e>
 294:	82 32       	cpi	r24, 0x22	; 34
 296:	29 f4       	brne	.+10     	; 0x2a2 <init_timer+0x120>
 298:	89 b7       	in	r24, 0x39	; 57
 29a:	80 64       	ori	r24, 0x40	; 64
 29c:	89 bf       	out	0x39, r24	; 57
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	08 95       	ret
 2a2:	83 32       	cpi	r24, 0x23	; 35
 2a4:	79 f0       	breq	.+30     	; 0x2c4 <init_timer+0x142>
 2a6:	89 b7       	in	r24, 0x39	; 57
 2a8:	8f 73       	andi	r24, 0x3F	; 63
 2aa:	89 bf       	out	0x39, r24	; 57
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	08 95       	ret
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	08 95       	ret
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	08 95       	ret
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	08 95       	ret
 2bc:	80 e0       	ldi	r24, 0x00	; 0
 2be:	08 95       	ret
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	08 95       	ret
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	08 95       	ret

000002c8 <update_timer>:
timer_error_types update_timer(timer_object *given_obj,ecore_u8 *val)
{
		timer_error_types ret_val=NO_ERRORS;
		if (given_obj != NULL)
 2c8:	00 97       	sbiw	r24, 0x00	; 0
 2ca:	91 f0       	breq	.+36     	; 0x2f0 <update_timer+0x28>
		{
			given_obj->timer_start_val=*val;
 2cc:	fb 01       	movw	r30, r22
 2ce:	20 81       	ld	r18, Z
 2d0:	42 2f       	mov	r20, r18
 2d2:	50 e0       	ldi	r21, 0x00	; 0
 2d4:	fc 01       	movw	r30, r24
 2d6:	55 83       	std	Z+5, r21	; 0x05
 2d8:	44 83       	std	Z+4, r20	; 0x04
			if (given_obj->timer_base == TIMER_0)
 2da:	80 81       	ld	r24, Z
 2dc:	83 35       	cpi	r24, 0x53	; 83
 2de:	19 f4       	brne	.+6      	; 0x2e6 <update_timer+0x1e>
			{
				TCNT0=(ecore_u8)given_obj->timer_start_val;
 2e0:	22 bf       	out	0x32, r18	; 50
	}
	return ret_val;
}
timer_error_types update_timer(timer_object *given_obj,ecore_u8 *val)
{
		timer_error_types ret_val=NO_ERRORS;
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	08 95       	ret
			given_obj->timer_start_val=*val;
			if (given_obj->timer_base == TIMER_0)
			{
				TCNT0=(ecore_u8)given_obj->timer_start_val;
			}
			else if(given_obj->timer_base == TIMER_2)
 2e6:	85 34       	cpi	r24, 0x45	; 69
 2e8:	29 f4       	brne	.+10     	; 0x2f4 <update_timer+0x2c>
			{
				TCNT2=(ecore_u8)given_obj->timer_start_val;
 2ea:	24 bd       	out	0x24, r18	; 36
	}
	return ret_val;
}
timer_error_types update_timer(timer_object *given_obj,ecore_u8 *val)
{
		timer_error_types ret_val=NO_ERRORS;
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	08 95       	ret
			}
			
		}
		else
		{
			ret_val=INVALID_PARAMS;
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	08 95       	ret
	}
	return ret_val;
}
timer_error_types update_timer(timer_object *given_obj,ecore_u8 *val)
{
		timer_error_types ret_val=NO_ERRORS;
 2f4:	80 e0       	ldi	r24, 0x00	; 0
		{
			ret_val=INVALID_PARAMS;
		}
		return ret_val;
	
}
 2f6:	08 95       	ret

000002f8 <__umulhisi3>:
 2f8:	a2 9f       	mul	r26, r18
 2fa:	b0 01       	movw	r22, r0
 2fc:	b3 9f       	mul	r27, r19
 2fe:	c0 01       	movw	r24, r0
 300:	a3 9f       	mul	r26, r19
 302:	70 0d       	add	r23, r0
 304:	81 1d       	adc	r24, r1
 306:	11 24       	eor	r1, r1
 308:	91 1d       	adc	r25, r1
 30a:	b2 9f       	mul	r27, r18
 30c:	70 0d       	add	r23, r0
 30e:	81 1d       	adc	r24, r1
 310:	11 24       	eor	r1, r1
 312:	91 1d       	adc	r25, r1
 314:	08 95       	ret

00000316 <_exit>:
 316:	f8 94       	cli

00000318 <__stop_program>:
 318:	ff cf       	rjmp	.-2      	; 0x318 <__stop_program>
