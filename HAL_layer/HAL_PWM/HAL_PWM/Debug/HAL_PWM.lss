
HAL_PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006e4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000738  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000738  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000768  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000007a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a66  00000000  00000000  000007e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000064a  00000000  00000000  0000124a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000047c  00000000  00000000  00001894  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000009c  00000000  00000000  00001d10  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000058f  00000000  00000000  00001dac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000407  00000000  00000000  0000233b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00002742  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 8c 01 	call	0x318	; 0x318 <main>
  64:	0c 94 70 03 	jmp	0x6e0	; 0x6e0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <pwm_init>:
#include "hal_PWM.h"
#include "hal_PWM_CFG.h"


pwm_error_t pwm_init(st_pwm_object*pwm_obj,timer_bases_t pwm_base ,pwm_output_mode_t pwm_mode ,pwm_operating_mode_t pwm_op_mode,msa_u32 pwm_freq,pwm_duty_cycle_t pwm_duty_cycle)
{
  6c:	4f 92       	push	r4
  6e:	5f 92       	push	r5
  70:	6f 92       	push	r6
  72:	7f 92       	push	r7
  74:	af 92       	push	r10
  76:	bf 92       	push	r11
  78:	cf 92       	push	r12
  7a:	ef 92       	push	r14
  7c:	ff 92       	push	r15
  7e:	0f 93       	push	r16
  80:	1f 93       	push	r17
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	fc 01       	movw	r30, r24
	pwm_error_t ret_val=NO_PWM_ERRORS;
	if ( ( (pwm_base==TIMER_0)||(pwm_base==TIMER_1)||(pwm_base==TIMER_2) ) && (pwm_freq != 0) && (pwm_obj != NULL)&&
  88:	63 35       	cpi	r22, 0x53	; 83
  8a:	29 f0       	breq	.+10     	; 0x96 <pwm_init+0x2a>
  8c:	6f 34       	cpi	r22, 0x4F	; 79
  8e:	19 f0       	breq	.+6      	; 0x96 <pwm_init+0x2a>
  90:	65 34       	cpi	r22, 0x45	; 69
  92:	09 f0       	breq	.+2      	; 0x96 <pwm_init+0x2a>
  94:	e9 c0       	rjmp	.+466    	; 0x268 <pwm_init+0x1fc>
  96:	e1 14       	cp	r14, r1
  98:	f1 04       	cpc	r15, r1
  9a:	01 05       	cpc	r16, r1
  9c:	11 05       	cpc	r17, r1
  9e:	09 f4       	brne	.+2      	; 0xa2 <pwm_init+0x36>
  a0:	e5 c0       	rjmp	.+458    	; 0x26c <pwm_init+0x200>
  a2:	30 97       	sbiw	r30, 0x00	; 0
  a4:	09 f4       	brne	.+2      	; 0xa8 <pwm_init+0x3c>
  a6:	e4 c0       	rjmp	.+456    	; 0x270 <pwm_init+0x204>
  a8:	8e ef       	ldi	r24, 0xFE	; 254
  aa:	84 0f       	add	r24, r20
  ac:	82 30       	cpi	r24, 0x02	; 2
  ae:	08 f0       	brcs	.+2      	; 0xb2 <pwm_init+0x46>
  b0:	e1 c0       	rjmp	.+450    	; 0x274 <pwm_init+0x208>
  b2:	27 01       	movw	r4, r14
  b4:	38 01       	movw	r6, r16
  b6:	14 2f       	mov	r17, r20
  b8:	f6 2e       	mov	r15, r22
  ba:	ef 01       	movw	r28, r30
		 ( (pwm_mode==INVERTED)||(pwm_mode==NON_INVERTED) ) && ( (pwm_op_mode == FAST_PWM) || (pwm_op_mode == PCORRECT_PWM) )&&
  bc:	23 30       	cpi	r18, 0x03	; 3
  be:	09 f4       	brne	.+2      	; 0xc2 <pwm_init+0x56>
  c0:	fc c0       	rjmp	.+504    	; 0x2ba <pwm_init+0x24e>
  c2:	21 30       	cpi	r18, 0x01	; 1
  c4:	09 f4       	brne	.+2      	; 0xc8 <pwm_init+0x5c>
  c6:	d8 c0       	rjmp	.+432    	; 0x278 <pwm_init+0x20c>
		}
		
	} 
	else
	{
		ret_val=INVALID_PWM_PARAMS;
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	18 c1       	rjmp	.+560    	; 0x2fc <pwm_init+0x290>
		{
			PrescalerNeeded=(msa_f32)((msa_f32)Fosc/((msa_f32)pwm_freq*(msa_f32)256));
			
			if (pwm_mode == NON_INVERTED)
			{
				OcrRegVal=(((pwm_duty_cycle*256)/100)-1);
  cc:	9c 2d       	mov	r25, r12
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	64 e6       	ldi	r22, 0x64	; 100
  d2:	70 e0       	ldi	r23, 0x00	; 0
  d4:	0e 94 48 03 	call	0x690	; 0x690 <__divmodhi4>
  d8:	8b 01       	movw	r16, r22
  da:	01 50       	subi	r16, 0x01	; 1
  dc:	11 09       	sbc	r17, r1
  de:	21 c0       	rjmp	.+66     	; 0x122 <pwm_init+0xb6>
			}
			else //inverted
			{
				OcrRegVal=255-((256*pwm_duty_cycle)/100);
  e0:	9c 2d       	mov	r25, r12
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	64 e6       	ldi	r22, 0x64	; 100
  e6:	70 e0       	ldi	r23, 0x00	; 0
  e8:	0e 94 48 03 	call	0x690	; 0x690 <__divmodhi4>
  ec:	0f ef       	ldi	r16, 0xFF	; 255
  ee:	10 e0       	ldi	r17, 0x00	; 0
  f0:	06 1b       	sub	r16, r22
  f2:	17 0b       	sbc	r17, r23
  f4:	16 c0       	rjmp	.+44     	; 0x122 <pwm_init+0xb6>
		{
			PrescalerNeeded=(msa_f32)((msa_f32)Fosc/((msa_f32)pwm_freq*(msa_f32)510));
			
			if (pwm_mode == NON_INVERTED)
			{
				OcrRegVal=((pwm_duty_cycle*255)/100);
  f6:	2f ef       	ldi	r18, 0xFF	; 255
  f8:	c2 9e       	mul	r12, r18
  fa:	c0 01       	movw	r24, r0
  fc:	11 24       	eor	r1, r1
  fe:	64 e6       	ldi	r22, 0x64	; 100
 100:	70 e0       	ldi	r23, 0x00	; 0
 102:	0e 94 48 03 	call	0x690	; 0x690 <__divmodhi4>
 106:	8b 01       	movw	r16, r22
 108:	0c c0       	rjmp	.+24     	; 0x122 <pwm_init+0xb6>
			}
			else //inverted
			{
				OcrRegVal=255-((255*pwm_duty_cycle)/100);
 10a:	5f ef       	ldi	r21, 0xFF	; 255
 10c:	c5 9e       	mul	r12, r21
 10e:	c0 01       	movw	r24, r0
 110:	11 24       	eor	r1, r1
 112:	64 e6       	ldi	r22, 0x64	; 100
 114:	70 e0       	ldi	r23, 0x00	; 0
 116:	0e 94 48 03 	call	0x690	; 0x690 <__divmodhi4>
 11a:	0f ef       	ldi	r16, 0xFF	; 255
 11c:	10 e0       	ldi	r17, 0x00	; 0
 11e:	06 1b       	sub	r16, r22
 120:	17 0b       	sbc	r17, r23
			}
		}
			 if (  PrescalerNeeded < (msa_f32)1.0) pwm_obj->prescaler_obj=NO_PRESCALER;
 122:	20 e0       	ldi	r18, 0x00	; 0
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	40 e8       	ldi	r20, 0x80	; 128
 128:	5f e3       	ldi	r21, 0x3F	; 63
 12a:	c3 01       	movw	r24, r6
 12c:	b2 01       	movw	r22, r4
 12e:	0e 94 ad 01 	call	0x35a	; 0x35a <__cmpsf2>
 132:	88 23       	and	r24, r24
 134:	24 f4       	brge	.+8      	; 0x13e <pwm_init+0xd2>
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	88 87       	std	Y+8, r24	; 0x08
#include "hal_PWM_CFG.h"


pwm_error_t pwm_init(st_pwm_object*pwm_obj,timer_bases_t pwm_base ,pwm_output_mode_t pwm_mode ,pwm_operating_mode_t pwm_op_mode,msa_u32 pwm_freq,pwm_duty_cycle_t pwm_duty_cycle)
{
	pwm_error_t ret_val=NO_PWM_ERRORS;
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	63 c0       	rjmp	.+198    	; 0x204 <pwm_init+0x198>
			{
				OcrRegVal=255-((255*pwm_duty_cycle)/100);
			}
		}
			 if (  PrescalerNeeded < (msa_f32)1.0) pwm_obj->prescaler_obj=NO_PRESCALER;
		else if ( (PrescalerNeeded > (msa_f32)1.0) && (PrescalerNeeded <(msa_f32)8.0) ) pwm_obj->prescaler_obj=PRESCALER_8;
 13e:	20 e0       	ldi	r18, 0x00	; 0
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	40 e8       	ldi	r20, 0x80	; 128
 144:	5f e3       	ldi	r21, 0x3F	; 63
 146:	c3 01       	movw	r24, r6
 148:	b2 01       	movw	r22, r4
 14a:	0e 94 d6 02 	call	0x5ac	; 0x5ac <__gesf2>
 14e:	18 16       	cp	r1, r24
 150:	74 f4       	brge	.+28     	; 0x16e <pwm_init+0x102>
 152:	20 e0       	ldi	r18, 0x00	; 0
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	40 e0       	ldi	r20, 0x00	; 0
 158:	51 e4       	ldi	r21, 0x41	; 65
 15a:	c3 01       	movw	r24, r6
 15c:	b2 01       	movw	r22, r4
 15e:	0e 94 ad 01 	call	0x35a	; 0x35a <__cmpsf2>
 162:	88 23       	and	r24, r24
 164:	24 f4       	brge	.+8      	; 0x16e <pwm_init+0x102>
 166:	82 e0       	ldi	r24, 0x02	; 2
 168:	88 87       	std	Y+8, r24	; 0x08
#include "hal_PWM_CFG.h"


pwm_error_t pwm_init(st_pwm_object*pwm_obj,timer_bases_t pwm_base ,pwm_output_mode_t pwm_mode ,pwm_operating_mode_t pwm_op_mode,msa_u32 pwm_freq,pwm_duty_cycle_t pwm_duty_cycle)
{
	pwm_error_t ret_val=NO_PWM_ERRORS;
 16a:	80 e0       	ldi	r24, 0x00	; 0
			{
				OcrRegVal=255-((255*pwm_duty_cycle)/100);
			}
		}
			 if (  PrescalerNeeded < (msa_f32)1.0) pwm_obj->prescaler_obj=NO_PRESCALER;
		else if ( (PrescalerNeeded > (msa_f32)1.0) && (PrescalerNeeded <(msa_f32)8.0) ) pwm_obj->prescaler_obj=PRESCALER_8;
 16c:	4b c0       	rjmp	.+150    	; 0x204 <pwm_init+0x198>
		else if ( (PrescalerNeeded > (msa_f32)8.0) && (PrescalerNeeded <(msa_f32)64.0) ) pwm_obj->prescaler_obj=PRESCALER_64;
 16e:	20 e0       	ldi	r18, 0x00	; 0
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	40 e0       	ldi	r20, 0x00	; 0
 174:	51 e4       	ldi	r21, 0x41	; 65
 176:	c3 01       	movw	r24, r6
 178:	b2 01       	movw	r22, r4
 17a:	0e 94 d6 02 	call	0x5ac	; 0x5ac <__gesf2>
 17e:	18 16       	cp	r1, r24
 180:	74 f4       	brge	.+28     	; 0x19e <pwm_init+0x132>
 182:	20 e0       	ldi	r18, 0x00	; 0
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	40 e8       	ldi	r20, 0x80	; 128
 188:	52 e4       	ldi	r21, 0x42	; 66
 18a:	c3 01       	movw	r24, r6
 18c:	b2 01       	movw	r22, r4
 18e:	0e 94 ad 01 	call	0x35a	; 0x35a <__cmpsf2>
 192:	88 23       	and	r24, r24
 194:	24 f4       	brge	.+8      	; 0x19e <pwm_init+0x132>
 196:	83 e0       	ldi	r24, 0x03	; 3
 198:	88 87       	std	Y+8, r24	; 0x08
#include "hal_PWM_CFG.h"


pwm_error_t pwm_init(st_pwm_object*pwm_obj,timer_bases_t pwm_base ,pwm_output_mode_t pwm_mode ,pwm_operating_mode_t pwm_op_mode,msa_u32 pwm_freq,pwm_duty_cycle_t pwm_duty_cycle)
{
	pwm_error_t ret_val=NO_PWM_ERRORS;
 19a:	80 e0       	ldi	r24, 0x00	; 0
				OcrRegVal=255-((255*pwm_duty_cycle)/100);
			}
		}
			 if (  PrescalerNeeded < (msa_f32)1.0) pwm_obj->prescaler_obj=NO_PRESCALER;
		else if ( (PrescalerNeeded > (msa_f32)1.0) && (PrescalerNeeded <(msa_f32)8.0) ) pwm_obj->prescaler_obj=PRESCALER_8;
		else if ( (PrescalerNeeded > (msa_f32)8.0) && (PrescalerNeeded <(msa_f32)64.0) ) pwm_obj->prescaler_obj=PRESCALER_64;
 19c:	33 c0       	rjmp	.+102    	; 0x204 <pwm_init+0x198>
		else if ( (PrescalerNeeded > (msa_f32)64.0) && (PrescalerNeeded <(msa_f32)256.0) ) pwm_obj->prescaler_obj=PRESCALER_256;
 19e:	20 e0       	ldi	r18, 0x00	; 0
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	40 e8       	ldi	r20, 0x80	; 128
 1a4:	52 e4       	ldi	r21, 0x42	; 66
 1a6:	c3 01       	movw	r24, r6
 1a8:	b2 01       	movw	r22, r4
 1aa:	0e 94 d6 02 	call	0x5ac	; 0x5ac <__gesf2>
 1ae:	18 16       	cp	r1, r24
 1b0:	74 f4       	brge	.+28     	; 0x1ce <pwm_init+0x162>
 1b2:	20 e0       	ldi	r18, 0x00	; 0
 1b4:	30 e0       	ldi	r19, 0x00	; 0
 1b6:	40 e8       	ldi	r20, 0x80	; 128
 1b8:	53 e4       	ldi	r21, 0x43	; 67
 1ba:	c3 01       	movw	r24, r6
 1bc:	b2 01       	movw	r22, r4
 1be:	0e 94 ad 01 	call	0x35a	; 0x35a <__cmpsf2>
 1c2:	88 23       	and	r24, r24
 1c4:	24 f4       	brge	.+8      	; 0x1ce <pwm_init+0x162>
 1c6:	84 e0       	ldi	r24, 0x04	; 4
 1c8:	88 87       	std	Y+8, r24	; 0x08
#include "hal_PWM_CFG.h"


pwm_error_t pwm_init(st_pwm_object*pwm_obj,timer_bases_t pwm_base ,pwm_output_mode_t pwm_mode ,pwm_operating_mode_t pwm_op_mode,msa_u32 pwm_freq,pwm_duty_cycle_t pwm_duty_cycle)
{
	pwm_error_t ret_val=NO_PWM_ERRORS;
 1ca:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
			 if (  PrescalerNeeded < (msa_f32)1.0) pwm_obj->prescaler_obj=NO_PRESCALER;
		else if ( (PrescalerNeeded > (msa_f32)1.0) && (PrescalerNeeded <(msa_f32)8.0) ) pwm_obj->prescaler_obj=PRESCALER_8;
		else if ( (PrescalerNeeded > (msa_f32)8.0) && (PrescalerNeeded <(msa_f32)64.0) ) pwm_obj->prescaler_obj=PRESCALER_64;
		else if ( (PrescalerNeeded > (msa_f32)64.0) && (PrescalerNeeded <(msa_f32)256.0) ) pwm_obj->prescaler_obj=PRESCALER_256;
 1cc:	1b c0       	rjmp	.+54     	; 0x204 <pwm_init+0x198>
		else if ( (PrescalerNeeded > (msa_f32)256.0) && (PrescalerNeeded <(msa_f32)1024.0) ) pwm_obj->prescaler_obj=PRESCALER_1024;
 1ce:	20 e0       	ldi	r18, 0x00	; 0
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	40 e8       	ldi	r20, 0x80	; 128
 1d4:	53 e4       	ldi	r21, 0x43	; 67
 1d6:	c3 01       	movw	r24, r6
 1d8:	b2 01       	movw	r22, r4
 1da:	0e 94 d6 02 	call	0x5ac	; 0x5ac <__gesf2>
 1de:	18 16       	cp	r1, r24
 1e0:	74 f4       	brge	.+28     	; 0x1fe <pwm_init+0x192>
 1e2:	20 e0       	ldi	r18, 0x00	; 0
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	40 e8       	ldi	r20, 0x80	; 128
 1e8:	54 e4       	ldi	r21, 0x44	; 68
 1ea:	c3 01       	movw	r24, r6
 1ec:	b2 01       	movw	r22, r4
 1ee:	0e 94 ad 01 	call	0x35a	; 0x35a <__cmpsf2>
 1f2:	88 23       	and	r24, r24
 1f4:	34 f4       	brge	.+12     	; 0x202 <pwm_init+0x196>
 1f6:	85 e0       	ldi	r24, 0x05	; 5
 1f8:	88 87       	std	Y+8, r24	; 0x08
#include "hal_PWM_CFG.h"


pwm_error_t pwm_init(st_pwm_object*pwm_obj,timer_bases_t pwm_base ,pwm_output_mode_t pwm_mode ,pwm_operating_mode_t pwm_op_mode,msa_u32 pwm_freq,pwm_duty_cycle_t pwm_duty_cycle)
{
	pwm_error_t ret_val=NO_PWM_ERRORS;
 1fa:	80 e0       	ldi	r24, 0x00	; 0
		}
			 if (  PrescalerNeeded < (msa_f32)1.0) pwm_obj->prescaler_obj=NO_PRESCALER;
		else if ( (PrescalerNeeded > (msa_f32)1.0) && (PrescalerNeeded <(msa_f32)8.0) ) pwm_obj->prescaler_obj=PRESCALER_8;
		else if ( (PrescalerNeeded > (msa_f32)8.0) && (PrescalerNeeded <(msa_f32)64.0) ) pwm_obj->prescaler_obj=PRESCALER_64;
		else if ( (PrescalerNeeded > (msa_f32)64.0) && (PrescalerNeeded <(msa_f32)256.0) ) pwm_obj->prescaler_obj=PRESCALER_256;
		else if ( (PrescalerNeeded > (msa_f32)256.0) && (PrescalerNeeded <(msa_f32)1024.0) ) pwm_obj->prescaler_obj=PRESCALER_1024;
 1fc:	03 c0       	rjmp	.+6      	; 0x204 <pwm_init+0x198>
		else ret_val=THE_NEEDED_PRESCALER_IMPOSSIBLE; 
 1fe:	82 e0       	ldi	r24, 0x02	; 2
 200:	01 c0       	rjmp	.+2      	; 0x204 <pwm_init+0x198>
 202:	82 e0       	ldi	r24, 0x02	; 2
		
		
		*(volatile msa_u8*)(pwm_obj->pwm_base_obj)|= pwm_obj->prescaler_obj;
 204:	ef 2d       	mov	r30, r15
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	20 81       	ld	r18, Z
 20a:	98 85       	ldd	r25, Y+8	; 0x08
 20c:	92 2b       	or	r25, r18
 20e:	90 83       	st	Z, r25
		*(volatile msa_u8*)(pwm_obj->pwm_base_obj)|= ( (( (pwm_obj->pwm_op_mode_obj) & 0x02)<< WGMn1) |((( (pwm_obj->pwm_op_mode_obj) & 0x01)<<WGMn0)) );
 210:	e8 81       	ld	r30, Y
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	20 81       	ld	r18, Z
 216:	3a 81       	ldd	r19, Y+2	; 0x02
 218:	93 2f       	mov	r25, r19
 21a:	92 70       	andi	r25, 0x02	; 2
 21c:	99 0f       	add	r25, r25
 21e:	99 0f       	add	r25, r25
 220:	92 2b       	or	r25, r18
 222:	30 fb       	bst	r19, 0
 224:	aa 24       	eor	r10, r10
 226:	a0 f8       	bld	r10, 0
 228:	b1 2c       	mov	r11, r1
 22a:	00 24       	eor	r0, r0
 22c:	b6 94       	lsr	r11
 22e:	a7 94       	ror	r10
 230:	07 94       	ror	r0
 232:	b6 94       	lsr	r11
 234:	a7 94       	ror	r10
 236:	07 94       	ror	r0
 238:	ba 2c       	mov	r11, r10
 23a:	a0 2c       	mov	r10, r0
 23c:	a9 2a       	or	r10, r25
 23e:	a0 82       	st	Z, r10
		*(volatile msa_u8*)(pwm_obj->pwm_base_obj)|= ( (pwm_obj->pwm_mode_obj)<<COMn); 
 240:	e8 81       	ld	r30, Y
 242:	f0 e0       	ldi	r31, 0x00	; 0
 244:	40 81       	ld	r20, Z
 246:	99 81       	ldd	r25, Y+1	; 0x01
 248:	50 e1       	ldi	r21, 0x10	; 16
 24a:	95 9f       	mul	r25, r21
 24c:	90 01       	movw	r18, r0
 24e:	11 24       	eor	r1, r1
 250:	24 2b       	or	r18, r20
 252:	20 83       	st	Z, r18
		if (pwm_base == TIMER_0)
 254:	93 e5       	ldi	r25, 0x53	; 83
 256:	f9 12       	cpse	r15, r25
 258:	02 c0       	rjmp	.+4      	; 0x25e <pwm_init+0x1f2>
		{
			OCR0=OcrRegVal;
 25a:	0c bf       	out	0x3c, r16	; 60
 25c:	4f c0       	rjmp	.+158    	; 0x2fc <pwm_init+0x290>
		}
		else if (pwm_base == TIMER_1)
		{
			//timer 1
		}
		else if (pwm_base == TIMER_2)
 25e:	25 e4       	ldi	r18, 0x45	; 69
 260:	f2 12       	cpse	r15, r18
 262:	4c c0       	rjmp	.+152    	; 0x2fc <pwm_init+0x290>
		{
			OCR2=OcrRegVal;
 264:	03 bd       	out	0x23, r16	; 35
 266:	4a c0       	rjmp	.+148    	; 0x2fc <pwm_init+0x290>
		}
		
	} 
	else
	{
		ret_val=INVALID_PWM_PARAMS;
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	48 c0       	rjmp	.+144    	; 0x2fc <pwm_init+0x290>
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	46 c0       	rjmp	.+140    	; 0x2fc <pwm_init+0x290>
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	44 c0       	rjmp	.+136    	; 0x2fc <pwm_init+0x290>
 274:	81 e0       	ldi	r24, 0x01	; 1
	}
	return ret_val;
 276:	42 c0       	rjmp	.+132    	; 0x2fc <pwm_init+0x290>
		 ( (pwm_mode==INVERTED)||(pwm_mode==NON_INVERTED) ) && ( (pwm_op_mode == FAST_PWM) || (pwm_op_mode == PCORRECT_PWM) )&&
		 ( (pwm_duty_cycle >= 0) || (pwm_duty_cycle <= 100) )
       )
	{
		//store data in the reference object
		pwm_obj->pwm_base_obj=pwm_base;
 278:	68 83       	st	Y, r22
		pwm_obj->pwm_duty_cycle_obj=pwm_duty_cycle;
 27a:	c7 82       	std	Z+7, r12	; 0x07
		pwm_obj->pwm_freq_obj=pwm_freq;
 27c:	43 82       	std	Z+3, r4	; 0x03
 27e:	54 82       	std	Z+4, r5	; 0x04
 280:	65 82       	std	Z+5, r6	; 0x05
 282:	76 82       	std	Z+6, r7	; 0x06
		pwm_obj->pwm_mode_obj=pwm_mode;
 284:	49 83       	std	Y+1, r20	; 0x01
		pwm_obj->pwm_op_mode_obj=pwm_op_mode;
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	82 83       	std	Z+2, r24	; 0x02
				OcrRegVal=255-((256*pwm_duty_cycle)/100);
			}
		}
		else //phase_correct
		{
			PrescalerNeeded=(msa_f32)((msa_f32)Fosc/((msa_f32)pwm_freq*(msa_f32)510));
 28a:	c3 01       	movw	r24, r6
 28c:	b2 01       	movw	r22, r4
 28e:	0e 94 24 02 	call	0x448	; 0x448 <__floatunsisf>
 292:	20 e0       	ldi	r18, 0x00	; 0
 294:	30 e0       	ldi	r19, 0x00	; 0
 296:	4f ef       	ldi	r20, 0xFF	; 255
 298:	53 e4       	ldi	r21, 0x43	; 67
 29a:	0e 94 db 02 	call	0x5b6	; 0x5b6 <__mulsf3>
 29e:	9b 01       	movw	r18, r22
 2a0:	ac 01       	movw	r20, r24
 2a2:	60 e0       	ldi	r22, 0x00	; 0
 2a4:	74 e2       	ldi	r23, 0x24	; 36
 2a6:	84 e7       	ldi	r24, 0x74	; 116
 2a8:	99 e4       	ldi	r25, 0x49	; 73
 2aa:	0e 94 b2 01 	call	0x364	; 0x364 <__divsf3>
 2ae:	2b 01       	movw	r4, r22
 2b0:	3c 01       	movw	r6, r24
			
			if (pwm_mode == NON_INVERTED)
 2b2:	12 30       	cpi	r17, 0x02	; 2
 2b4:	09 f0       	breq	.+2      	; 0x2b8 <pwm_init+0x24c>
 2b6:	29 cf       	rjmp	.-430    	; 0x10a <pwm_init+0x9e>
 2b8:	1e cf       	rjmp	.-452    	; 0xf6 <pwm_init+0x8a>
		 ( (pwm_mode==INVERTED)||(pwm_mode==NON_INVERTED) ) && ( (pwm_op_mode == FAST_PWM) || (pwm_op_mode == PCORRECT_PWM) )&&
		 ( (pwm_duty_cycle >= 0) || (pwm_duty_cycle <= 100) )
       )
	{
		//store data in the reference object
		pwm_obj->pwm_base_obj=pwm_base;
 2ba:	68 83       	st	Y, r22
		pwm_obj->pwm_duty_cycle_obj=pwm_duty_cycle;
 2bc:	c7 82       	std	Z+7, r12	; 0x07
		pwm_obj->pwm_freq_obj=pwm_freq;
 2be:	43 82       	std	Z+3, r4	; 0x03
 2c0:	54 82       	std	Z+4, r5	; 0x04
 2c2:	65 82       	std	Z+5, r6	; 0x05
 2c4:	76 82       	std	Z+6, r7	; 0x06
		pwm_obj->pwm_mode_obj=pwm_mode;
 2c6:	49 83       	std	Y+1, r20	; 0x01
		pwm_obj->pwm_op_mode_obj=pwm_op_mode;
 2c8:	83 e0       	ldi	r24, 0x03	; 3
 2ca:	82 83       	std	Z+2, r24	; 0x02
		msa_u16 OcrRegVal;
		msa_f32  PrescalerNeeded;
		//getting the prescaler and the OCR register value needed
		if (pwm_op_mode == FAST_PWM)
		{
			PrescalerNeeded=(msa_f32)((msa_f32)Fosc/((msa_f32)pwm_freq*(msa_f32)256));
 2cc:	c3 01       	movw	r24, r6
 2ce:	b2 01       	movw	r22, r4
 2d0:	0e 94 24 02 	call	0x448	; 0x448 <__floatunsisf>
 2d4:	20 e0       	ldi	r18, 0x00	; 0
 2d6:	30 e0       	ldi	r19, 0x00	; 0
 2d8:	40 e8       	ldi	r20, 0x80	; 128
 2da:	53 e4       	ldi	r21, 0x43	; 67
 2dc:	0e 94 db 02 	call	0x5b6	; 0x5b6 <__mulsf3>
 2e0:	9b 01       	movw	r18, r22
 2e2:	ac 01       	movw	r20, r24
 2e4:	60 e0       	ldi	r22, 0x00	; 0
 2e6:	74 e2       	ldi	r23, 0x24	; 36
 2e8:	84 e7       	ldi	r24, 0x74	; 116
 2ea:	99 e4       	ldi	r25, 0x49	; 73
 2ec:	0e 94 b2 01 	call	0x364	; 0x364 <__divsf3>
 2f0:	2b 01       	movw	r4, r22
 2f2:	3c 01       	movw	r6, r24
			
			if (pwm_mode == NON_INVERTED)
 2f4:	12 30       	cpi	r17, 0x02	; 2
 2f6:	09 f0       	breq	.+2      	; 0x2fa <pwm_init+0x28e>
 2f8:	f3 ce       	rjmp	.-538    	; 0xe0 <pwm_init+0x74>
 2fa:	e8 ce       	rjmp	.-560    	; 0xcc <pwm_init+0x60>
	else
	{
		ret_val=INVALID_PWM_PARAMS;
	}
	return ret_val;
 2fc:	df 91       	pop	r29
 2fe:	cf 91       	pop	r28
 300:	1f 91       	pop	r17
 302:	0f 91       	pop	r16
 304:	ff 90       	pop	r15
 306:	ef 90       	pop	r14
 308:	cf 90       	pop	r12
 30a:	bf 90       	pop	r11
 30c:	af 90       	pop	r10
 30e:	7f 90       	pop	r7
 310:	6f 90       	pop	r6
 312:	5f 90       	pop	r5
 314:	4f 90       	pop	r4
 316:	08 95       	ret

00000318 <main>:
*   in fast-mode		Focn_PWM=(F_clk_io/(N*256))
*	in phase-correct	Focn_PWM=(F_clk_io/(N*510))
*	The Timer/Counter Overflow Flag (TOV0) is set each time the counter reaches BOTTOM.
*/  
int main(void)
{
 318:	cf 93       	push	r28
 31a:	df 93       	push	r29
 31c:	cd b7       	in	r28, 0x3d	; 61
 31e:	de b7       	in	r29, 0x3e	; 62
 320:	29 97       	sbiw	r28, 0x09	; 9
 322:	0f b6       	in	r0, 0x3f	; 63
 324:	f8 94       	cli
 326:	de bf       	out	0x3e, r29	; 62
 328:	0f be       	out	0x3f, r0	; 63
 32a:	cd bf       	out	0x3d, r28	; 61
	st_pwm_object pwm_1,pwm_2;
	DDRB=0xff;
 32c:	8f ef       	ldi	r24, 0xFF	; 255
 32e:	87 bb       	out	0x17, r24	; 23
	PORTB=0xff;
 330:	88 bb       	out	0x18, r24	; 24
	DDRD=0xff;
 332:	81 bb       	out	0x11, r24	; 17
	PORTD=0xff;
 334:	82 bb       	out	0x12, r24	; 18
	pwm_error_t res= pwm_init(&pwm_1,TIMER_0,NON_INVERTED,FAST_PWM,31250,FIVE_PERCENT);
 336:	0f 2e       	mov	r0, r31
 338:	f5 e0       	ldi	r31, 0x05	; 5
 33a:	cf 2e       	mov	r12, r31
 33c:	f0 2d       	mov	r31, r0
 33e:	12 e1       	ldi	r17, 0x12	; 18
 340:	e1 2e       	mov	r14, r17
 342:	1a e7       	ldi	r17, 0x7A	; 122
 344:	f1 2e       	mov	r15, r17
 346:	00 e0       	ldi	r16, 0x00	; 0
 348:	10 e0       	ldi	r17, 0x00	; 0
 34a:	23 e0       	ldi	r18, 0x03	; 3
 34c:	42 e0       	ldi	r20, 0x02	; 2
 34e:	63 e5       	ldi	r22, 0x53	; 83
 350:	ce 01       	movw	r24, r28
 352:	01 96       	adiw	r24, 0x01	; 1
 354:	0e 94 36 00 	call	0x6c	; 0x6c <pwm_init>
 358:	ff cf       	rjmp	.-2      	; 0x358 <main+0x40>

0000035a <__cmpsf2>:
 35a:	0e 94 61 02 	call	0x4c2	; 0x4c2 <__fp_cmp>
 35e:	08 f4       	brcc	.+2      	; 0x362 <__cmpsf2+0x8>
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	08 95       	ret

00000364 <__divsf3>:
 364:	0e 94 c6 01 	call	0x38c	; 0x38c <__divsf3x>
 368:	0c 94 9c 02 	jmp	0x538	; 0x538 <__fp_round>
 36c:	0e 94 95 02 	call	0x52a	; 0x52a <__fp_pscB>
 370:	58 f0       	brcs	.+22     	; 0x388 <__divsf3+0x24>
 372:	0e 94 8e 02 	call	0x51c	; 0x51c <__fp_pscA>
 376:	40 f0       	brcs	.+16     	; 0x388 <__divsf3+0x24>
 378:	29 f4       	brne	.+10     	; 0x384 <__divsf3+0x20>
 37a:	5f 3f       	cpi	r21, 0xFF	; 255
 37c:	29 f0       	breq	.+10     	; 0x388 <__divsf3+0x24>
 37e:	0c 94 85 02 	jmp	0x50a	; 0x50a <__fp_inf>
 382:	51 11       	cpse	r21, r1
 384:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__fp_szero>
 388:	0c 94 8b 02 	jmp	0x516	; 0x516 <__fp_nan>

0000038c <__divsf3x>:
 38c:	0e 94 ad 02 	call	0x55a	; 0x55a <__fp_split3>
 390:	68 f3       	brcs	.-38     	; 0x36c <__divsf3+0x8>

00000392 <__divsf3_pse>:
 392:	99 23       	and	r25, r25
 394:	b1 f3       	breq	.-20     	; 0x382 <__divsf3+0x1e>
 396:	55 23       	and	r21, r21
 398:	91 f3       	breq	.-28     	; 0x37e <__divsf3+0x1a>
 39a:	95 1b       	sub	r25, r21
 39c:	55 0b       	sbc	r21, r21
 39e:	bb 27       	eor	r27, r27
 3a0:	aa 27       	eor	r26, r26
 3a2:	62 17       	cp	r22, r18
 3a4:	73 07       	cpc	r23, r19
 3a6:	84 07       	cpc	r24, r20
 3a8:	38 f0       	brcs	.+14     	; 0x3b8 <__divsf3_pse+0x26>
 3aa:	9f 5f       	subi	r25, 0xFF	; 255
 3ac:	5f 4f       	sbci	r21, 0xFF	; 255
 3ae:	22 0f       	add	r18, r18
 3b0:	33 1f       	adc	r19, r19
 3b2:	44 1f       	adc	r20, r20
 3b4:	aa 1f       	adc	r26, r26
 3b6:	a9 f3       	breq	.-22     	; 0x3a2 <__divsf3_pse+0x10>
 3b8:	35 d0       	rcall	.+106    	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 3ba:	0e 2e       	mov	r0, r30
 3bc:	3a f0       	brmi	.+14     	; 0x3cc <__divsf3_pse+0x3a>
 3be:	e0 e8       	ldi	r30, 0x80	; 128
 3c0:	32 d0       	rcall	.+100    	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 3c2:	91 50       	subi	r25, 0x01	; 1
 3c4:	50 40       	sbci	r21, 0x00	; 0
 3c6:	e6 95       	lsr	r30
 3c8:	00 1c       	adc	r0, r0
 3ca:	ca f7       	brpl	.-14     	; 0x3be <__divsf3_pse+0x2c>
 3cc:	2b d0       	rcall	.+86     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 3ce:	fe 2f       	mov	r31, r30
 3d0:	29 d0       	rcall	.+82     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 3d2:	66 0f       	add	r22, r22
 3d4:	77 1f       	adc	r23, r23
 3d6:	88 1f       	adc	r24, r24
 3d8:	bb 1f       	adc	r27, r27
 3da:	26 17       	cp	r18, r22
 3dc:	37 07       	cpc	r19, r23
 3de:	48 07       	cpc	r20, r24
 3e0:	ab 07       	cpc	r26, r27
 3e2:	b0 e8       	ldi	r27, 0x80	; 128
 3e4:	09 f0       	breq	.+2      	; 0x3e8 <__divsf3_pse+0x56>
 3e6:	bb 0b       	sbc	r27, r27
 3e8:	80 2d       	mov	r24, r0
 3ea:	bf 01       	movw	r22, r30
 3ec:	ff 27       	eor	r31, r31
 3ee:	93 58       	subi	r25, 0x83	; 131
 3f0:	5f 4f       	sbci	r21, 0xFF	; 255
 3f2:	3a f0       	brmi	.+14     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3f4:	9e 3f       	cpi	r25, 0xFE	; 254
 3f6:	51 05       	cpc	r21, r1
 3f8:	78 f0       	brcs	.+30     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 3fa:	0c 94 85 02 	jmp	0x50a	; 0x50a <__fp_inf>
 3fe:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__fp_szero>
 402:	5f 3f       	cpi	r21, 0xFF	; 255
 404:	e4 f3       	brlt	.-8      	; 0x3fe <__divsf3_pse+0x6c>
 406:	98 3e       	cpi	r25, 0xE8	; 232
 408:	d4 f3       	brlt	.-12     	; 0x3fe <__divsf3_pse+0x6c>
 40a:	86 95       	lsr	r24
 40c:	77 95       	ror	r23
 40e:	67 95       	ror	r22
 410:	b7 95       	ror	r27
 412:	f7 95       	ror	r31
 414:	9f 5f       	subi	r25, 0xFF	; 255
 416:	c9 f7       	brne	.-14     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 418:	88 0f       	add	r24, r24
 41a:	91 1d       	adc	r25, r1
 41c:	96 95       	lsr	r25
 41e:	87 95       	ror	r24
 420:	97 f9       	bld	r25, 7
 422:	08 95       	ret
 424:	e1 e0       	ldi	r30, 0x01	; 1
 426:	66 0f       	add	r22, r22
 428:	77 1f       	adc	r23, r23
 42a:	88 1f       	adc	r24, r24
 42c:	bb 1f       	adc	r27, r27
 42e:	62 17       	cp	r22, r18
 430:	73 07       	cpc	r23, r19
 432:	84 07       	cpc	r24, r20
 434:	ba 07       	cpc	r27, r26
 436:	20 f0       	brcs	.+8      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 438:	62 1b       	sub	r22, r18
 43a:	73 0b       	sbc	r23, r19
 43c:	84 0b       	sbc	r24, r20
 43e:	ba 0b       	sbc	r27, r26
 440:	ee 1f       	adc	r30, r30
 442:	88 f7       	brcc	.-30     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 444:	e0 95       	com	r30
 446:	08 95       	ret

00000448 <__floatunsisf>:
 448:	e8 94       	clt
 44a:	09 c0       	rjmp	.+18     	; 0x45e <__floatsisf+0x12>

0000044c <__floatsisf>:
 44c:	97 fb       	bst	r25, 7
 44e:	3e f4       	brtc	.+14     	; 0x45e <__floatsisf+0x12>
 450:	90 95       	com	r25
 452:	80 95       	com	r24
 454:	70 95       	com	r23
 456:	61 95       	neg	r22
 458:	7f 4f       	sbci	r23, 0xFF	; 255
 45a:	8f 4f       	sbci	r24, 0xFF	; 255
 45c:	9f 4f       	sbci	r25, 0xFF	; 255
 45e:	99 23       	and	r25, r25
 460:	a9 f0       	breq	.+42     	; 0x48c <__floatsisf+0x40>
 462:	f9 2f       	mov	r31, r25
 464:	96 e9       	ldi	r25, 0x96	; 150
 466:	bb 27       	eor	r27, r27
 468:	93 95       	inc	r25
 46a:	f6 95       	lsr	r31
 46c:	87 95       	ror	r24
 46e:	77 95       	ror	r23
 470:	67 95       	ror	r22
 472:	b7 95       	ror	r27
 474:	f1 11       	cpse	r31, r1
 476:	f8 cf       	rjmp	.-16     	; 0x468 <__floatsisf+0x1c>
 478:	fa f4       	brpl	.+62     	; 0x4b8 <__floatsisf+0x6c>
 47a:	bb 0f       	add	r27, r27
 47c:	11 f4       	brne	.+4      	; 0x482 <__floatsisf+0x36>
 47e:	60 ff       	sbrs	r22, 0
 480:	1b c0       	rjmp	.+54     	; 0x4b8 <__floatsisf+0x6c>
 482:	6f 5f       	subi	r22, 0xFF	; 255
 484:	7f 4f       	sbci	r23, 0xFF	; 255
 486:	8f 4f       	sbci	r24, 0xFF	; 255
 488:	9f 4f       	sbci	r25, 0xFF	; 255
 48a:	16 c0       	rjmp	.+44     	; 0x4b8 <__floatsisf+0x6c>
 48c:	88 23       	and	r24, r24
 48e:	11 f0       	breq	.+4      	; 0x494 <__floatsisf+0x48>
 490:	96 e9       	ldi	r25, 0x96	; 150
 492:	11 c0       	rjmp	.+34     	; 0x4b6 <__floatsisf+0x6a>
 494:	77 23       	and	r23, r23
 496:	21 f0       	breq	.+8      	; 0x4a0 <__floatsisf+0x54>
 498:	9e e8       	ldi	r25, 0x8E	; 142
 49a:	87 2f       	mov	r24, r23
 49c:	76 2f       	mov	r23, r22
 49e:	05 c0       	rjmp	.+10     	; 0x4aa <__floatsisf+0x5e>
 4a0:	66 23       	and	r22, r22
 4a2:	71 f0       	breq	.+28     	; 0x4c0 <__floatsisf+0x74>
 4a4:	96 e8       	ldi	r25, 0x86	; 134
 4a6:	86 2f       	mov	r24, r22
 4a8:	70 e0       	ldi	r23, 0x00	; 0
 4aa:	60 e0       	ldi	r22, 0x00	; 0
 4ac:	2a f0       	brmi	.+10     	; 0x4b8 <__floatsisf+0x6c>
 4ae:	9a 95       	dec	r25
 4b0:	66 0f       	add	r22, r22
 4b2:	77 1f       	adc	r23, r23
 4b4:	88 1f       	adc	r24, r24
 4b6:	da f7       	brpl	.-10     	; 0x4ae <__floatsisf+0x62>
 4b8:	88 0f       	add	r24, r24
 4ba:	96 95       	lsr	r25
 4bc:	87 95       	ror	r24
 4be:	97 f9       	bld	r25, 7
 4c0:	08 95       	ret

000004c2 <__fp_cmp>:
 4c2:	99 0f       	add	r25, r25
 4c4:	00 08       	sbc	r0, r0
 4c6:	55 0f       	add	r21, r21
 4c8:	aa 0b       	sbc	r26, r26
 4ca:	e0 e8       	ldi	r30, 0x80	; 128
 4cc:	fe ef       	ldi	r31, 0xFE	; 254
 4ce:	16 16       	cp	r1, r22
 4d0:	17 06       	cpc	r1, r23
 4d2:	e8 07       	cpc	r30, r24
 4d4:	f9 07       	cpc	r31, r25
 4d6:	c0 f0       	brcs	.+48     	; 0x508 <__fp_cmp+0x46>
 4d8:	12 16       	cp	r1, r18
 4da:	13 06       	cpc	r1, r19
 4dc:	e4 07       	cpc	r30, r20
 4de:	f5 07       	cpc	r31, r21
 4e0:	98 f0       	brcs	.+38     	; 0x508 <__fp_cmp+0x46>
 4e2:	62 1b       	sub	r22, r18
 4e4:	73 0b       	sbc	r23, r19
 4e6:	84 0b       	sbc	r24, r20
 4e8:	95 0b       	sbc	r25, r21
 4ea:	39 f4       	brne	.+14     	; 0x4fa <__fp_cmp+0x38>
 4ec:	0a 26       	eor	r0, r26
 4ee:	61 f0       	breq	.+24     	; 0x508 <__fp_cmp+0x46>
 4f0:	23 2b       	or	r18, r19
 4f2:	24 2b       	or	r18, r20
 4f4:	25 2b       	or	r18, r21
 4f6:	21 f4       	brne	.+8      	; 0x500 <__fp_cmp+0x3e>
 4f8:	08 95       	ret
 4fa:	0a 26       	eor	r0, r26
 4fc:	09 f4       	brne	.+2      	; 0x500 <__fp_cmp+0x3e>
 4fe:	a1 40       	sbci	r26, 0x01	; 1
 500:	a6 95       	lsr	r26
 502:	8f ef       	ldi	r24, 0xFF	; 255
 504:	81 1d       	adc	r24, r1
 506:	81 1d       	adc	r24, r1
 508:	08 95       	ret

0000050a <__fp_inf>:
 50a:	97 f9       	bld	r25, 7
 50c:	9f 67       	ori	r25, 0x7F	; 127
 50e:	80 e8       	ldi	r24, 0x80	; 128
 510:	70 e0       	ldi	r23, 0x00	; 0
 512:	60 e0       	ldi	r22, 0x00	; 0
 514:	08 95       	ret

00000516 <__fp_nan>:
 516:	9f ef       	ldi	r25, 0xFF	; 255
 518:	80 ec       	ldi	r24, 0xC0	; 192
 51a:	08 95       	ret

0000051c <__fp_pscA>:
 51c:	00 24       	eor	r0, r0
 51e:	0a 94       	dec	r0
 520:	16 16       	cp	r1, r22
 522:	17 06       	cpc	r1, r23
 524:	18 06       	cpc	r1, r24
 526:	09 06       	cpc	r0, r25
 528:	08 95       	ret

0000052a <__fp_pscB>:
 52a:	00 24       	eor	r0, r0
 52c:	0a 94       	dec	r0
 52e:	12 16       	cp	r1, r18
 530:	13 06       	cpc	r1, r19
 532:	14 06       	cpc	r1, r20
 534:	05 06       	cpc	r0, r21
 536:	08 95       	ret

00000538 <__fp_round>:
 538:	09 2e       	mov	r0, r25
 53a:	03 94       	inc	r0
 53c:	00 0c       	add	r0, r0
 53e:	11 f4       	brne	.+4      	; 0x544 <__fp_round+0xc>
 540:	88 23       	and	r24, r24
 542:	52 f0       	brmi	.+20     	; 0x558 <__fp_round+0x20>
 544:	bb 0f       	add	r27, r27
 546:	40 f4       	brcc	.+16     	; 0x558 <__fp_round+0x20>
 548:	bf 2b       	or	r27, r31
 54a:	11 f4       	brne	.+4      	; 0x550 <__fp_round+0x18>
 54c:	60 ff       	sbrs	r22, 0
 54e:	04 c0       	rjmp	.+8      	; 0x558 <__fp_round+0x20>
 550:	6f 5f       	subi	r22, 0xFF	; 255
 552:	7f 4f       	sbci	r23, 0xFF	; 255
 554:	8f 4f       	sbci	r24, 0xFF	; 255
 556:	9f 4f       	sbci	r25, 0xFF	; 255
 558:	08 95       	ret

0000055a <__fp_split3>:
 55a:	57 fd       	sbrc	r21, 7
 55c:	90 58       	subi	r25, 0x80	; 128
 55e:	44 0f       	add	r20, r20
 560:	55 1f       	adc	r21, r21
 562:	59 f0       	breq	.+22     	; 0x57a <__fp_splitA+0x10>
 564:	5f 3f       	cpi	r21, 0xFF	; 255
 566:	71 f0       	breq	.+28     	; 0x584 <__fp_splitA+0x1a>
 568:	47 95       	ror	r20

0000056a <__fp_splitA>:
 56a:	88 0f       	add	r24, r24
 56c:	97 fb       	bst	r25, 7
 56e:	99 1f       	adc	r25, r25
 570:	61 f0       	breq	.+24     	; 0x58a <__fp_splitA+0x20>
 572:	9f 3f       	cpi	r25, 0xFF	; 255
 574:	79 f0       	breq	.+30     	; 0x594 <__fp_splitA+0x2a>
 576:	87 95       	ror	r24
 578:	08 95       	ret
 57a:	12 16       	cp	r1, r18
 57c:	13 06       	cpc	r1, r19
 57e:	14 06       	cpc	r1, r20
 580:	55 1f       	adc	r21, r21
 582:	f2 cf       	rjmp	.-28     	; 0x568 <__fp_split3+0xe>
 584:	46 95       	lsr	r20
 586:	f1 df       	rcall	.-30     	; 0x56a <__fp_splitA>
 588:	08 c0       	rjmp	.+16     	; 0x59a <__fp_splitA+0x30>
 58a:	16 16       	cp	r1, r22
 58c:	17 06       	cpc	r1, r23
 58e:	18 06       	cpc	r1, r24
 590:	99 1f       	adc	r25, r25
 592:	f1 cf       	rjmp	.-30     	; 0x576 <__fp_splitA+0xc>
 594:	86 95       	lsr	r24
 596:	71 05       	cpc	r23, r1
 598:	61 05       	cpc	r22, r1
 59a:	08 94       	sec
 59c:	08 95       	ret

0000059e <__fp_zero>:
 59e:	e8 94       	clt

000005a0 <__fp_szero>:
 5a0:	bb 27       	eor	r27, r27
 5a2:	66 27       	eor	r22, r22
 5a4:	77 27       	eor	r23, r23
 5a6:	cb 01       	movw	r24, r22
 5a8:	97 f9       	bld	r25, 7
 5aa:	08 95       	ret

000005ac <__gesf2>:
 5ac:	0e 94 61 02 	call	0x4c2	; 0x4c2 <__fp_cmp>
 5b0:	08 f4       	brcc	.+2      	; 0x5b4 <__gesf2+0x8>
 5b2:	8f ef       	ldi	r24, 0xFF	; 255
 5b4:	08 95       	ret

000005b6 <__mulsf3>:
 5b6:	0e 94 ee 02 	call	0x5dc	; 0x5dc <__mulsf3x>
 5ba:	0c 94 9c 02 	jmp	0x538	; 0x538 <__fp_round>
 5be:	0e 94 8e 02 	call	0x51c	; 0x51c <__fp_pscA>
 5c2:	38 f0       	brcs	.+14     	; 0x5d2 <__mulsf3+0x1c>
 5c4:	0e 94 95 02 	call	0x52a	; 0x52a <__fp_pscB>
 5c8:	20 f0       	brcs	.+8      	; 0x5d2 <__mulsf3+0x1c>
 5ca:	95 23       	and	r25, r21
 5cc:	11 f0       	breq	.+4      	; 0x5d2 <__mulsf3+0x1c>
 5ce:	0c 94 85 02 	jmp	0x50a	; 0x50a <__fp_inf>
 5d2:	0c 94 8b 02 	jmp	0x516	; 0x516 <__fp_nan>
 5d6:	11 24       	eor	r1, r1
 5d8:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__fp_szero>

000005dc <__mulsf3x>:
 5dc:	0e 94 ad 02 	call	0x55a	; 0x55a <__fp_split3>
 5e0:	70 f3       	brcs	.-36     	; 0x5be <__mulsf3+0x8>

000005e2 <__mulsf3_pse>:
 5e2:	95 9f       	mul	r25, r21
 5e4:	c1 f3       	breq	.-16     	; 0x5d6 <__mulsf3+0x20>
 5e6:	95 0f       	add	r25, r21
 5e8:	50 e0       	ldi	r21, 0x00	; 0
 5ea:	55 1f       	adc	r21, r21
 5ec:	62 9f       	mul	r22, r18
 5ee:	f0 01       	movw	r30, r0
 5f0:	72 9f       	mul	r23, r18
 5f2:	bb 27       	eor	r27, r27
 5f4:	f0 0d       	add	r31, r0
 5f6:	b1 1d       	adc	r27, r1
 5f8:	63 9f       	mul	r22, r19
 5fa:	aa 27       	eor	r26, r26
 5fc:	f0 0d       	add	r31, r0
 5fe:	b1 1d       	adc	r27, r1
 600:	aa 1f       	adc	r26, r26
 602:	64 9f       	mul	r22, r20
 604:	66 27       	eor	r22, r22
 606:	b0 0d       	add	r27, r0
 608:	a1 1d       	adc	r26, r1
 60a:	66 1f       	adc	r22, r22
 60c:	82 9f       	mul	r24, r18
 60e:	22 27       	eor	r18, r18
 610:	b0 0d       	add	r27, r0
 612:	a1 1d       	adc	r26, r1
 614:	62 1f       	adc	r22, r18
 616:	73 9f       	mul	r23, r19
 618:	b0 0d       	add	r27, r0
 61a:	a1 1d       	adc	r26, r1
 61c:	62 1f       	adc	r22, r18
 61e:	83 9f       	mul	r24, r19
 620:	a0 0d       	add	r26, r0
 622:	61 1d       	adc	r22, r1
 624:	22 1f       	adc	r18, r18
 626:	74 9f       	mul	r23, r20
 628:	33 27       	eor	r19, r19
 62a:	a0 0d       	add	r26, r0
 62c:	61 1d       	adc	r22, r1
 62e:	23 1f       	adc	r18, r19
 630:	84 9f       	mul	r24, r20
 632:	60 0d       	add	r22, r0
 634:	21 1d       	adc	r18, r1
 636:	82 2f       	mov	r24, r18
 638:	76 2f       	mov	r23, r22
 63a:	6a 2f       	mov	r22, r26
 63c:	11 24       	eor	r1, r1
 63e:	9f 57       	subi	r25, 0x7F	; 127
 640:	50 40       	sbci	r21, 0x00	; 0
 642:	9a f0       	brmi	.+38     	; 0x66a <__mulsf3_pse+0x88>
 644:	f1 f0       	breq	.+60     	; 0x682 <__mulsf3_pse+0xa0>
 646:	88 23       	and	r24, r24
 648:	4a f0       	brmi	.+18     	; 0x65c <__mulsf3_pse+0x7a>
 64a:	ee 0f       	add	r30, r30
 64c:	ff 1f       	adc	r31, r31
 64e:	bb 1f       	adc	r27, r27
 650:	66 1f       	adc	r22, r22
 652:	77 1f       	adc	r23, r23
 654:	88 1f       	adc	r24, r24
 656:	91 50       	subi	r25, 0x01	; 1
 658:	50 40       	sbci	r21, 0x00	; 0
 65a:	a9 f7       	brne	.-22     	; 0x646 <__mulsf3_pse+0x64>
 65c:	9e 3f       	cpi	r25, 0xFE	; 254
 65e:	51 05       	cpc	r21, r1
 660:	80 f0       	brcs	.+32     	; 0x682 <__mulsf3_pse+0xa0>
 662:	0c 94 85 02 	jmp	0x50a	; 0x50a <__fp_inf>
 666:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__fp_szero>
 66a:	5f 3f       	cpi	r21, 0xFF	; 255
 66c:	e4 f3       	brlt	.-8      	; 0x666 <__mulsf3_pse+0x84>
 66e:	98 3e       	cpi	r25, 0xE8	; 232
 670:	d4 f3       	brlt	.-12     	; 0x666 <__mulsf3_pse+0x84>
 672:	86 95       	lsr	r24
 674:	77 95       	ror	r23
 676:	67 95       	ror	r22
 678:	b7 95       	ror	r27
 67a:	f7 95       	ror	r31
 67c:	e7 95       	ror	r30
 67e:	9f 5f       	subi	r25, 0xFF	; 255
 680:	c1 f7       	brne	.-16     	; 0x672 <__mulsf3_pse+0x90>
 682:	fe 2b       	or	r31, r30
 684:	88 0f       	add	r24, r24
 686:	91 1d       	adc	r25, r1
 688:	96 95       	lsr	r25
 68a:	87 95       	ror	r24
 68c:	97 f9       	bld	r25, 7
 68e:	08 95       	ret

00000690 <__divmodhi4>:
 690:	97 fb       	bst	r25, 7
 692:	07 2e       	mov	r0, r23
 694:	16 f4       	brtc	.+4      	; 0x69a <__divmodhi4+0xa>
 696:	00 94       	com	r0
 698:	07 d0       	rcall	.+14     	; 0x6a8 <__divmodhi4_neg1>
 69a:	77 fd       	sbrc	r23, 7
 69c:	09 d0       	rcall	.+18     	; 0x6b0 <__divmodhi4_neg2>
 69e:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <__udivmodhi4>
 6a2:	07 fc       	sbrc	r0, 7
 6a4:	05 d0       	rcall	.+10     	; 0x6b0 <__divmodhi4_neg2>
 6a6:	3e f4       	brtc	.+14     	; 0x6b6 <__divmodhi4_exit>

000006a8 <__divmodhi4_neg1>:
 6a8:	90 95       	com	r25
 6aa:	81 95       	neg	r24
 6ac:	9f 4f       	sbci	r25, 0xFF	; 255
 6ae:	08 95       	ret

000006b0 <__divmodhi4_neg2>:
 6b0:	70 95       	com	r23
 6b2:	61 95       	neg	r22
 6b4:	7f 4f       	sbci	r23, 0xFF	; 255

000006b6 <__divmodhi4_exit>:
 6b6:	08 95       	ret

000006b8 <__udivmodhi4>:
 6b8:	aa 1b       	sub	r26, r26
 6ba:	bb 1b       	sub	r27, r27
 6bc:	51 e1       	ldi	r21, 0x11	; 17
 6be:	07 c0       	rjmp	.+14     	; 0x6ce <__udivmodhi4_ep>

000006c0 <__udivmodhi4_loop>:
 6c0:	aa 1f       	adc	r26, r26
 6c2:	bb 1f       	adc	r27, r27
 6c4:	a6 17       	cp	r26, r22
 6c6:	b7 07       	cpc	r27, r23
 6c8:	10 f0       	brcs	.+4      	; 0x6ce <__udivmodhi4_ep>
 6ca:	a6 1b       	sub	r26, r22
 6cc:	b7 0b       	sbc	r27, r23

000006ce <__udivmodhi4_ep>:
 6ce:	88 1f       	adc	r24, r24
 6d0:	99 1f       	adc	r25, r25
 6d2:	5a 95       	dec	r21
 6d4:	a9 f7       	brne	.-22     	; 0x6c0 <__udivmodhi4_loop>
 6d6:	80 95       	com	r24
 6d8:	90 95       	com	r25
 6da:	bc 01       	movw	r22, r24
 6dc:	cd 01       	movw	r24, r26
 6de:	08 95       	ret

000006e0 <_exit>:
 6e0:	f8 94       	cli

000006e2 <__stop_program>:
 6e2:	ff cf       	rjmp	.-2      	; 0x6e2 <__stop_program>
