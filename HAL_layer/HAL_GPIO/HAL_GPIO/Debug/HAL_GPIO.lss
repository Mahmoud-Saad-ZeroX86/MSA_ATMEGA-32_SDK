
HAL_GPIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000290  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000314  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c18  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000649  00000000  00000000  00000fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000042e  00000000  00000000  00001631  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d8  00000000  00000000  00001a60  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000471  00000000  00000000  00001b38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004cf  00000000  00000000  00001fa9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00002478  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 00 01 	call	0x200	; 0x200 <main>
  64:	0c 94 46 01 	jmp	0x28c	; 0x28c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <set_port_output>:
#define NULL ((void *)0)

gpio_errors set_port_output(gpio_bases *base)
{
	gpio_errors b_ret_val=NO_ERRORS;
	if ( (base >=(gpio_bases*) BASE_D) && (base <=(gpio_bases*) BASE_A) )
  6c:	9c 01       	movw	r18, r24
  6e:	20 53       	subi	r18, 0x30	; 48
  70:	31 09       	sbc	r19, r1
  72:	2a 30       	cpi	r18, 0x0A	; 10
  74:	31 05       	cpc	r19, r1
  76:	28 f4       	brcc	.+10     	; 0x82 <set_port_output+0x16>
	{
		*((volatile msa_u8*)base+DDR_OFFSET)=0xff;
  78:	2f ef       	ldi	r18, 0xFF	; 255
  7a:	fc 01       	movw	r30, r24
  7c:	21 83       	std	Z+1, r18	; 0x01

#define NULL ((void *)0)

gpio_errors set_port_output(gpio_bases *base)
{
	gpio_errors b_ret_val=NO_ERRORS;
  7e:	80 e0       	ldi	r24, 0x00	; 0
  80:	08 95       	ret
	{
		*((volatile msa_u8*)base+DDR_OFFSET)=0xff;
	}
	else
	{
		b_ret_val=INVALID_PARAMS;
  82:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return b_ret_val;
}
  84:	08 95       	ret

00000086 <set_port_input>:

gpio_errors set_port_input(gpio_bases *base)
{
	gpio_errors b_ret_val=NO_ERRORS;
	if ( (base >=(gpio_bases*) BASE_D) && (base <=(gpio_bases*) BASE_A) )
  86:	9c 01       	movw	r18, r24
  88:	20 53       	subi	r18, 0x30	; 48
  8a:	31 09       	sbc	r19, r1
  8c:	2a 30       	cpi	r18, 0x0A	; 10
  8e:	31 05       	cpc	r19, r1
  90:	30 f4       	brcc	.+12     	; 0x9e <set_port_input+0x18>
	{
		*((volatile msa_u8*)base+DDR_OFFSET)=0x00;
  92:	fc 01       	movw	r30, r24
  94:	11 82       	std	Z+1, r1	; 0x01
		*((volatile msa_u8*)base+PORT_OFFSET)=0xff;//activates the pull up resistor,comment if not needed !!!>>:<<
  96:	2f ef       	ldi	r18, 0xFF	; 255
  98:	22 83       	std	Z+2, r18	; 0x02
	return b_ret_val;
}

gpio_errors set_port_input(gpio_bases *base)
{
	gpio_errors b_ret_val=NO_ERRORS;
  9a:	80 e0       	ldi	r24, 0x00	; 0
  9c:	08 95       	ret
		*((volatile msa_u8*)base+DDR_OFFSET)=0x00;
		*((volatile msa_u8*)base+PORT_OFFSET)=0xff;//activates the pull up resistor,comment if not needed !!!>>:<<
	}
	else
	{
		b_ret_val=INVALID_PARAMS;
  9e:	81 e0       	ldi	r24, 0x01	; 1
	}

	return b_ret_val;
}
  a0:	08 95       	ret

000000a2 <set_pin_output>:

gpio_errors set_pin_output(gpio_bases *base,gpio_pin_no pin_no)
{
	
	gpio_errors b_ret_val=NO_ERRORS;
	if ( (base >=(gpio_bases*) BASE_D) && (base <=(gpio_bases*) BASE_A) && ( (pin_no >= PIN_ZERO) && (pin_no <= PIN_SEVEN) ) )
  a2:	9c 01       	movw	r18, r24
  a4:	20 53       	subi	r18, 0x30	; 48
  a6:	31 09       	sbc	r19, r1
  a8:	2a 30       	cpi	r18, 0x0A	; 10
  aa:	31 05       	cpc	r19, r1
  ac:	78 f4       	brcc	.+30     	; 0xcc <set_pin_output+0x2a>
  ae:	68 30       	cpi	r22, 0x08	; 8
  b0:	78 f4       	brcc	.+30     	; 0xd0 <set_pin_output+0x2e>
	{
		*((volatile msa_u8*)base+DDR_OFFSET)|=(1<<pin_no);
  b2:	fc 01       	movw	r30, r24
  b4:	41 81       	ldd	r20, Z+1	; 0x01
  b6:	21 e0       	ldi	r18, 0x01	; 1
  b8:	30 e0       	ldi	r19, 0x00	; 0
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <set_pin_output+0x1e>
  bc:	22 0f       	add	r18, r18
  be:	33 1f       	adc	r19, r19
  c0:	6a 95       	dec	r22
  c2:	e2 f7       	brpl	.-8      	; 0xbc <set_pin_output+0x1a>
  c4:	24 2b       	or	r18, r20
  c6:	21 83       	std	Z+1, r18	; 0x01
}

gpio_errors set_pin_output(gpio_bases *base,gpio_pin_no pin_no)
{
	
	gpio_errors b_ret_val=NO_ERRORS;
  c8:	80 e0       	ldi	r24, 0x00	; 0
	if ( (base >=(gpio_bases*) BASE_D) && (base <=(gpio_bases*) BASE_A) && ( (pin_no >= PIN_ZERO) && (pin_no <= PIN_SEVEN) ) )
	{
		*((volatile msa_u8*)base+DDR_OFFSET)|=(1<<pin_no);
  ca:	08 95       	ret
	}
	else
	{
		b_ret_val=INVALID_PARAMS;
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	08 95       	ret
  d0:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return b_ret_val;
}
  d2:	08 95       	ret

000000d4 <set_pin_input>:
gpio_errors set_pin_input(gpio_bases *base,gpio_pin_no pin_no)
{
	
	gpio_errors b_ret_val=NO_ERRORS;
	if ( (base >= (gpio_bases*) BASE_D) && (base <= (gpio_bases*) BASE_A) && ( (pin_no >= PIN_ZERO) && (pin_no <= PIN_SEVEN) ) )
  d4:	9c 01       	movw	r18, r24
  d6:	20 53       	subi	r18, 0x30	; 48
  d8:	31 09       	sbc	r19, r1
  da:	2a 30       	cpi	r18, 0x0A	; 10
  dc:	31 05       	cpc	r19, r1
  de:	a0 f4       	brcc	.+40     	; 0x108 <set_pin_input+0x34>
  e0:	68 30       	cpi	r22, 0x08	; 8
  e2:	a0 f4       	brcc	.+40     	; 0x10c <set_pin_input+0x38>
	{
		*((volatile msa_u8*)base+DDR_OFFSET)&=~(1<<pin_no);
  e4:	fc 01       	movw	r30, r24
  e6:	41 81       	ldd	r20, Z+1	; 0x01
  e8:	21 e0       	ldi	r18, 0x01	; 1
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <set_pin_input+0x1e>
  ee:	22 0f       	add	r18, r18
  f0:	33 1f       	adc	r19, r19
  f2:	6a 95       	dec	r22
  f4:	e2 f7       	brpl	.-8      	; 0xee <set_pin_input+0x1a>
  f6:	32 2f       	mov	r19, r18
  f8:	30 95       	com	r19
  fa:	34 23       	and	r19, r20
  fc:	31 83       	std	Z+1, r19	; 0x01
		*((volatile msa_u8*)base+PORT_OFFSET)|=(1<<pin_no);
  fe:	32 81       	ldd	r19, Z+2	; 0x02
 100:	23 2b       	or	r18, r19
 102:	22 83       	std	Z+2, r18	; 0x02
	return b_ret_val;
}
gpio_errors set_pin_input(gpio_bases *base,gpio_pin_no pin_no)
{
	
	gpio_errors b_ret_val=NO_ERRORS;
 104:	80 e0       	ldi	r24, 0x00	; 0
	if ( (base >= (gpio_bases*) BASE_D) && (base <= (gpio_bases*) BASE_A) && ( (pin_no >= PIN_ZERO) && (pin_no <= PIN_SEVEN) ) )
	{
		*((volatile msa_u8*)base+DDR_OFFSET)&=~(1<<pin_no);
		*((volatile msa_u8*)base+PORT_OFFSET)|=(1<<pin_no);
 106:	08 95       	ret
	}
	else
	{
		b_ret_val=INVALID_PARAMS;
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	08 95       	ret
 10c:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return b_ret_val;
}
 10e:	08 95       	ret

00000110 <read_port>:


gpio_errors read_port(gpio_bases *base,msa_u8 *val)
{
	gpio_errors b_ret_val=NO_ERRORS;
	if((base >= (gpio_bases*) BASE_D) && (base <= (gpio_bases*) BASE_A) && (val != NULL))
 110:	9c 01       	movw	r18, r24
 112:	20 53       	subi	r18, 0x30	; 48
 114:	31 09       	sbc	r19, r1
 116:	2a 30       	cpi	r18, 0x0A	; 10
 118:	31 05       	cpc	r19, r1
 11a:	48 f4       	brcc	.+18     	; 0x12e <read_port+0x1e>
 11c:	61 15       	cp	r22, r1
 11e:	71 05       	cpc	r23, r1
 120:	41 f0       	breq	.+16     	; 0x132 <read_port+0x22>
	{
		
		*val=*(msa_u8 *)base;
 122:	fc 01       	movw	r30, r24
 124:	80 81       	ld	r24, Z
 126:	fb 01       	movw	r30, r22
 128:	80 83       	st	Z, r24
}


gpio_errors read_port(gpio_bases *base,msa_u8 *val)
{
	gpio_errors b_ret_val=NO_ERRORS;
 12a:	80 e0       	ldi	r24, 0x00	; 0
	if((base >= (gpio_bases*) BASE_D) && (base <= (gpio_bases*) BASE_A) && (val != NULL))
	{
		
		*val=*(msa_u8 *)base;
 12c:	08 95       	ret
	}
	else
	{
		b_ret_val=INVALID_PARAMS;
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	08 95       	ret
 132:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	
	
	return b_ret_val;
}
 134:	08 95       	ret

00000136 <write_port>:
gpio_errors write_port(gpio_bases *base,msa_u8 *val)
{
	
	gpio_errors b_ret_val=NO_ERRORS;
	if((base >= (gpio_bases*) BASE_D) && (base <= (gpio_bases*) BASE_A) && (val != NULL))
 136:	9c 01       	movw	r18, r24
 138:	20 53       	subi	r18, 0x30	; 48
 13a:	31 09       	sbc	r19, r1
 13c:	2a 30       	cpi	r18, 0x0A	; 10
 13e:	31 05       	cpc	r19, r1
 140:	48 f4       	brcc	.+18     	; 0x154 <write_port+0x1e>
 142:	61 15       	cp	r22, r1
 144:	71 05       	cpc	r23, r1
 146:	41 f0       	breq	.+16     	; 0x158 <write_port+0x22>
	{
		
		*((msa_u8 *)base+PORT_OFFSET)=*val;
 148:	fb 01       	movw	r30, r22
 14a:	20 81       	ld	r18, Z
 14c:	fc 01       	movw	r30, r24
 14e:	22 83       	std	Z+2, r18	; 0x02
	return b_ret_val;
}
gpio_errors write_port(gpio_bases *base,msa_u8 *val)
{
	
	gpio_errors b_ret_val=NO_ERRORS;
 150:	80 e0       	ldi	r24, 0x00	; 0
	if((base >= (gpio_bases*) BASE_D) && (base <= (gpio_bases*) BASE_A) && (val != NULL))
	{
		
		*((msa_u8 *)base+PORT_OFFSET)=*val;
 152:	08 95       	ret
	}
	else
	{
		b_ret_val=INVALID_PARAMS;
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	08 95       	ret
 158:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	
	
	return b_ret_val;
}
 15a:	08 95       	ret

0000015c <read_pin>:
gpio_errors read_pin(gpio_bases *base,msa_u8 pin_no,bool_t *val)
{	gpio_errors b_ret_val=NO_ERRORS;
	if( (base >= (gpio_bases*) BASE_D) && (base <= (gpio_bases*) BASE_A) && (val != NULL) && ( (pin_no >= PIN_ZERO) && (pin_no <= PIN_SEVEN) ) )
 15c:	9c 01       	movw	r18, r24
 15e:	20 53       	subi	r18, 0x30	; 48
 160:	31 09       	sbc	r19, r1
 162:	2a 30       	cpi	r18, 0x0A	; 10
 164:	31 05       	cpc	r19, r1
 166:	98 f4       	brcc	.+38     	; 0x18e <read_pin+0x32>
 168:	41 15       	cp	r20, r1
 16a:	51 05       	cpc	r21, r1
 16c:	91 f0       	breq	.+36     	; 0x192 <read_pin+0x36>
 16e:	68 30       	cpi	r22, 0x08	; 8
 170:	90 f4       	brcc	.+36     	; 0x196 <read_pin+0x3a>
	{
		*val=(bool_t)((*(msa_u8 *)base)&(1<<pin_no));
 172:	21 e0       	ldi	r18, 0x01	; 1
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	02 c0       	rjmp	.+4      	; 0x17c <read_pin+0x20>
 178:	22 0f       	add	r18, r18
 17a:	33 1f       	adc	r19, r19
 17c:	6a 95       	dec	r22
 17e:	e2 f7       	brpl	.-8      	; 0x178 <read_pin+0x1c>
 180:	fc 01       	movw	r30, r24
 182:	80 81       	ld	r24, Z
 184:	28 23       	and	r18, r24
 186:	fa 01       	movw	r30, r20
 188:	20 83       	st	Z, r18
	
	
	return b_ret_val;
}
gpio_errors read_pin(gpio_bases *base,msa_u8 pin_no,bool_t *val)
{	gpio_errors b_ret_val=NO_ERRORS;
 18a:	80 e0       	ldi	r24, 0x00	; 0
	if( (base >= (gpio_bases*) BASE_D) && (base <= (gpio_bases*) BASE_A) && (val != NULL) && ( (pin_no >= PIN_ZERO) && (pin_no <= PIN_SEVEN) ) )
	{
		*val=(bool_t)((*(msa_u8 *)base)&(1<<pin_no));
 18c:	08 95       	ret
	}
	else
	{
		b_ret_val=INVALID_PARAMS;
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	08 95       	ret
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	08 95       	ret
 196:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	
	
	return b_ret_val;
}
 198:	08 95       	ret

0000019a <set_pin_low>:
gpio_errors set_pin_low(gpio_bases *base,gpio_pin_no pin_no)
{
	gpio_errors b_ret_val=NO_ERRORS;
	if( (base >= (gpio_bases*) BASE_D) && (base <= (gpio_bases*) BASE_A) && ( (pin_no >= PIN_ZERO) && (pin_no <= PIN_SEVEN) ) )
 19a:	9c 01       	movw	r18, r24
 19c:	20 53       	subi	r18, 0x30	; 48
 19e:	31 09       	sbc	r19, r1
 1a0:	2a 30       	cpi	r18, 0x0A	; 10
 1a2:	31 05       	cpc	r19, r1
 1a4:	80 f4       	brcc	.+32     	; 0x1c6 <set_pin_low+0x2c>
 1a6:	68 30       	cpi	r22, 0x08	; 8
 1a8:	80 f4       	brcc	.+32     	; 0x1ca <set_pin_low+0x30>
	{
		(*(volatile msa_u8 *)(base+PORT_OFFSET))&=~(1<<pin_no);
 1aa:	fc 01       	movw	r30, r24
 1ac:	42 81       	ldd	r20, Z+2	; 0x02
 1ae:	21 e0       	ldi	r18, 0x01	; 1
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <set_pin_low+0x1e>
 1b4:	22 0f       	add	r18, r18
 1b6:	33 1f       	adc	r19, r19
 1b8:	6a 95       	dec	r22
 1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <set_pin_low+0x1a>
 1bc:	20 95       	com	r18
 1be:	24 23       	and	r18, r20
 1c0:	22 83       	std	Z+2, r18	; 0x02
	
	return b_ret_val;
}
gpio_errors set_pin_low(gpio_bases *base,gpio_pin_no pin_no)
{
	gpio_errors b_ret_val=NO_ERRORS;
 1c2:	80 e0       	ldi	r24, 0x00	; 0
	if( (base >= (gpio_bases*) BASE_D) && (base <= (gpio_bases*) BASE_A) && ( (pin_no >= PIN_ZERO) && (pin_no <= PIN_SEVEN) ) )
	{
		(*(volatile msa_u8 *)(base+PORT_OFFSET))&=~(1<<pin_no);
 1c4:	08 95       	ret
	}
	else
	{
		b_ret_val=INVALID_PARAMS;
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	08 95       	ret
 1ca:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return b_ret_val;
}
 1cc:	08 95       	ret

000001ce <set_pin_high>:
gpio_errors set_pin_high(gpio_bases *base,gpio_pin_no pin_no)
{
	gpio_errors b_ret_val=NO_ERRORS;
	if( (base >= (gpio_bases*) BASE_D) && (base <= (gpio_bases*) BASE_A) && ( (pin_no >= PIN_ZERO) && (pin_no <= PIN_SEVEN) ) )
 1ce:	9c 01       	movw	r18, r24
 1d0:	20 53       	subi	r18, 0x30	; 48
 1d2:	31 09       	sbc	r19, r1
 1d4:	2a 30       	cpi	r18, 0x0A	; 10
 1d6:	31 05       	cpc	r19, r1
 1d8:	78 f4       	brcc	.+30     	; 0x1f8 <set_pin_high+0x2a>
 1da:	68 30       	cpi	r22, 0x08	; 8
 1dc:	78 f4       	brcc	.+30     	; 0x1fc <set_pin_high+0x2e>
	{
		(*(volatile msa_u8 *)(base+PORT_OFFSET))|=(1<<pin_no);
 1de:	fc 01       	movw	r30, r24
 1e0:	42 81       	ldd	r20, Z+2	; 0x02
 1e2:	21 e0       	ldi	r18, 0x01	; 1
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <set_pin_high+0x1e>
 1e8:	22 0f       	add	r18, r18
 1ea:	33 1f       	adc	r19, r19
 1ec:	6a 95       	dec	r22
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <set_pin_high+0x1a>
 1f0:	24 2b       	or	r18, r20
 1f2:	22 83       	std	Z+2, r18	; 0x02
	
	return b_ret_val;
}
gpio_errors set_pin_high(gpio_bases *base,gpio_pin_no pin_no)
{
	gpio_errors b_ret_val=NO_ERRORS;
 1f4:	80 e0       	ldi	r24, 0x00	; 0
	if( (base >= (gpio_bases*) BASE_D) && (base <= (gpio_bases*) BASE_A) && ( (pin_no >= PIN_ZERO) && (pin_no <= PIN_SEVEN) ) )
	{
		(*(volatile msa_u8 *)(base+PORT_OFFSET))|=(1<<pin_no);
 1f6:	08 95       	ret
	}
	else
	{
		b_ret_val=INVALID_PARAMS;
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	08 95       	ret
 1fc:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return b_ret_val;
 1fe:	08 95       	ret

00000200 <main>:
 */ 
#include "hal_GPIO.h"


int main(void)
{
 200:	cf 93       	push	r28
 202:	df 93       	push	r29
 204:	00 d0       	rcall	.+0      	; 0x206 <main+0x6>
 206:	cd b7       	in	r28, 0x3d	; 61
 208:	de b7       	in	r29, 0x3e	; 62
	gpio_bases *port_c=(gpio_bases *)BASE_C;
	msa_u8 val;
	bool_t val_of_pin;
    while (1) 
    {
		set_port_output	(port_a);
 20a:	89 e3       	ldi	r24, 0x39	; 57
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	0e 94 36 00 	call	0x6c	; 0x6c <set_port_output>
		set_port_input	(port_b);
 212:	86 e3       	ldi	r24, 0x36	; 54
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	0e 94 43 00 	call	0x86	; 0x86 <set_port_input>
		set_pin_output	(port_c,PIN_ONE);
 21a:	61 e0       	ldi	r22, 0x01	; 1
 21c:	83 e3       	ldi	r24, 0x33	; 51
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	0e 94 51 00 	call	0xa2	; 0xa2 <set_pin_output>
		set_pin_output	(port_c,PIN_TWO);
 224:	62 e0       	ldi	r22, 0x02	; 2
 226:	83 e3       	ldi	r24, 0x33	; 51
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	0e 94 51 00 	call	0xa2	; 0xa2 <set_pin_output>
		set_pin_input	(port_c,PIN_FOUR);
 22e:	64 e0       	ldi	r22, 0x04	; 4
 230:	83 e3       	ldi	r24, 0x33	; 51
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	0e 94 6a 00 	call	0xd4	; 0xd4 <set_pin_input>
		set_pin_input	(port_c,PIN_FIVE);
 238:	65 e0       	ldi	r22, 0x05	; 5
 23a:	83 e3       	ldi	r24, 0x33	; 51
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	0e 94 6a 00 	call	0xd4	; 0xd4 <set_pin_input>
		read_port		(port_b,&val);
 242:	be 01       	movw	r22, r28
 244:	6f 5f       	subi	r22, 0xFF	; 255
 246:	7f 4f       	sbci	r23, 0xFF	; 255
 248:	86 e3       	ldi	r24, 0x36	; 54
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	0e 94 88 00 	call	0x110	; 0x110 <read_port>
			PORTA=0x08;
		}
		else
		PORTA=0x00;
		*/
		write_port		(port_a,&val);
 250:	be 01       	movw	r22, r28
 252:	6f 5f       	subi	r22, 0xFF	; 255
 254:	7f 4f       	sbci	r23, 0xFF	; 255
 256:	89 e3       	ldi	r24, 0x39	; 57
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	0e 94 9b 00 	call	0x136	; 0x136 <write_port>
		read_pin		(port_c,PIN_FOUR,&val_of_pin);
 25e:	ae 01       	movw	r20, r28
 260:	4e 5f       	subi	r20, 0xFE	; 254
 262:	5f 4f       	sbci	r21, 0xFF	; 255
 264:	64 e0       	ldi	r22, 0x04	; 4
 266:	83 e3       	ldi	r24, 0x33	; 51
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	0e 94 ae 00 	call	0x15c	; 0x15c <read_pin>
		if (val_of_pin == 0)
 26e:	8a 81       	ldd	r24, Y+2	; 0x02
 270:	81 11       	cpse	r24, r1
 272:	06 c0       	rjmp	.+12     	; 0x280 <main+0x80>
		{
			set_pin_low(port_c,PIN_ONE);
 274:	61 e0       	ldi	r22, 0x01	; 1
 276:	83 e3       	ldi	r24, 0x33	; 51
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	0e 94 cd 00 	call	0x19a	; 0x19a <set_pin_low>
 27e:	c5 cf       	rjmp	.-118    	; 0x20a <main+0xa>
		} 
		else
		{
			set_pin_high(port_c,PIN_ONE);
 280:	61 e0       	ldi	r22, 0x01	; 1
 282:	83 e3       	ldi	r24, 0x33	; 51
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	0e 94 e7 00 	call	0x1ce	; 0x1ce <set_pin_high>
 28a:	bf cf       	rjmp	.-130    	; 0x20a <main+0xa>

0000028c <_exit>:
 28c:	f8 94       	cli

0000028e <__stop_program>:
 28e:	ff cf       	rjmp	.-2      	; 0x28e <__stop_program>
