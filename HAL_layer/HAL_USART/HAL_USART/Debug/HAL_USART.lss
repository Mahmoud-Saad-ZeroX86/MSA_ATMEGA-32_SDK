
HAL_USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  000002d2  00000366  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00800064  00800064  0000036a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000036a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000039c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e9d  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000789  00000000  00000000  000012fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000687  00000000  00000000  00001a86  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  00002110  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000068a  00000000  00000000  000022d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009b0  00000000  00000000  0000295a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  0000330a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__vector_13>
  38:	0c 94 04 01 	jmp	0x208	; 0x208 <__vector_14>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ed       	ldi	r30, 0xD2	; 210
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 37       	cpi	r26, 0x73	; 115
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 3f 01 	call	0x27e	; 0x27e <main>
  8a:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <usart_init>:
	}
	PORTA=0xff;
	return ret_val;
	
	
}
  92:	cf 92       	push	r12
  94:	ef 92       	push	r14
  96:	0f 93       	push	r16
  98:	00 97       	sbiw	r24, 0x00	; 0
  9a:	09 f4       	brne	.+2      	; 0x9e <usart_init+0xc>
  9c:	4b c0       	rjmp	.+150    	; 0x134 <usart_init+0xa2>
  9e:	3f ef       	ldi	r19, 0xFF	; 255
  a0:	36 0f       	add	r19, r22
  a2:	33 30       	cpi	r19, 0x03	; 3
  a4:	08 f0       	brcs	.+2      	; 0xa8 <usart_init+0x16>
  a6:	48 c0       	rjmp	.+144    	; 0x138 <usart_init+0xa6>
  a8:	42 30       	cpi	r20, 0x02	; 2
  aa:	08 f0       	brcs	.+2      	; 0xae <usart_init+0x1c>
  ac:	47 c0       	rjmp	.+142    	; 0x13c <usart_init+0xaa>
  ae:	24 30       	cpi	r18, 0x04	; 4
  b0:	08 f0       	brcs	.+2      	; 0xb4 <usart_init+0x22>
  b2:	46 c0       	rjmp	.+140    	; 0x140 <usart_init+0xae>
  b4:	08 30       	cpi	r16, 0x08	; 8
  b6:	08 f0       	brcs	.+2      	; 0xba <usart_init+0x28>
  b8:	45 c0       	rjmp	.+138    	; 0x144 <usart_init+0xb2>
  ba:	31 e0       	ldi	r19, 0x01	; 1
  bc:	3e 15       	cp	r19, r14
  be:	08 f4       	brcc	.+2      	; 0xc2 <usart_init+0x30>
  c0:	43 c0       	rjmp	.+134    	; 0x148 <usart_init+0xb6>
  c2:	e1 10       	cpse	r14, r1
  c4:	0c c0       	rjmp	.+24     	; 0xde <usart_init+0x4c>
  c6:	f8 94       	cli
  c8:	61 30       	cpi	r22, 0x01	; 1
  ca:	11 f4       	brne	.+4      	; 0xd0 <usart_init+0x3e>
  cc:	55 9a       	sbi	0x0a, 5	; 10
  ce:	07 c0       	rjmp	.+14     	; 0xde <usart_init+0x4c>
  d0:	62 30       	cpi	r22, 0x02	; 2
  d2:	11 f4       	brne	.+4      	; 0xd8 <usart_init+0x46>
  d4:	57 9a       	sbi	0x0a, 7	; 10
  d6:	03 c0       	rjmp	.+6      	; 0xde <usart_init+0x4c>
  d8:	3a b1       	in	r19, 0x0a	; 10
  da:	30 6a       	ori	r19, 0xA0	; 160
  dc:	3a b9       	out	0x0a, r19	; 10
  de:	fc 01       	movw	r30, r24
  e0:	03 83       	std	Z+3, r16	; 0x03
  e2:	31 e0       	ldi	r19, 0x01	; 1
  e4:	35 83       	std	Z+5, r19	; 0x05
  e6:	e4 82       	std	Z+4, r14	; 0x04
  e8:	61 83       	std	Z+1, r22	; 0x01
  ea:	22 83       	std	Z+2, r18	; 0x02
  ec:	40 83       	st	Z, r20
  ee:	9a b1       	in	r25, 0x0a	; 10
  f0:	80 2f       	mov	r24, r16
  f2:	84 70       	andi	r24, 0x04	; 4
  f4:	88 0f       	add	r24, r24
  f6:	88 0f       	add	r24, r24
  f8:	89 2b       	or	r24, r25
  fa:	66 0f       	add	r22, r22
  fc:	66 0f       	add	r22, r22
  fe:	66 0f       	add	r22, r22
 100:	68 2b       	or	r22, r24
 102:	6a b9       	out	0x0a, r22	; 10
 104:	03 70       	andi	r16, 0x03	; 3
 106:	00 0f       	add	r16, r16
 108:	8c 2d       	mov	r24, r12
 10a:	80 68       	ori	r24, 0x80	; 128
 10c:	08 2b       	or	r16, r24
 10e:	f0 e1       	ldi	r31, 0x10	; 16
 110:	2f 9f       	mul	r18, r31
 112:	c0 01       	movw	r24, r0
 114:	11 24       	eor	r1, r1
 116:	80 2b       	or	r24, r16
 118:	44 0f       	add	r20, r20
 11a:	44 0f       	add	r20, r20
 11c:	44 0f       	add	r20, r20
 11e:	48 2b       	or	r20, r24
 120:	40 bd       	out	0x20, r20	; 32
 122:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <UBRR_VAL>
 126:	89 b9       	out	0x09, r24	; 9
 128:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <UBRR_VAL+0x1>
 12c:	8f 77       	andi	r24, 0x7F	; 127
 12e:	80 bd       	out	0x20, r24	; 32
 130:	85 e1       	ldi	r24, 0x15	; 21
 132:	0b c0       	rjmp	.+22     	; 0x14a <usart_init+0xb8>
 134:	86 e1       	ldi	r24, 0x16	; 22
 136:	09 c0       	rjmp	.+18     	; 0x14a <usart_init+0xb8>
 138:	86 e1       	ldi	r24, 0x16	; 22
 13a:	07 c0       	rjmp	.+14     	; 0x14a <usart_init+0xb8>
 13c:	86 e1       	ldi	r24, 0x16	; 22
 13e:	05 c0       	rjmp	.+10     	; 0x14a <usart_init+0xb8>
 140:	86 e1       	ldi	r24, 0x16	; 22
 142:	03 c0       	rjmp	.+6      	; 0x14a <usart_init+0xb8>
 144:	86 e1       	ldi	r24, 0x16	; 22
 146:	01 c0       	rjmp	.+2      	; 0x14a <usart_init+0xb8>
 148:	86 e1       	ldi	r24, 0x16	; 22
 14a:	e1 10       	cpse	r14, r1
 14c:	01 c0       	rjmp	.+2      	; 0x150 <usart_init+0xbe>
 14e:	78 94       	sei
 150:	0f 91       	pop	r16
 152:	ef 90       	pop	r14
 154:	cf 90       	pop	r12
 156:	08 95       	ret

00000158 <usart_send_byte>:
 158:	00 97       	sbiw	r24, 0x00	; 0
 15a:	71 f0       	breq	.+28     	; 0x178 <usart_send_byte+0x20>
 15c:	61 15       	cp	r22, r1
 15e:	71 05       	cpc	r23, r1
 160:	69 f0       	breq	.+26     	; 0x17c <usart_send_byte+0x24>
 162:	fc 01       	movw	r30, r24
 164:	85 81       	ldd	r24, Z+5	; 0x05
 166:	81 30       	cpi	r24, 0x01	; 1
 168:	59 f4       	brne	.+22     	; 0x180 <usart_send_byte+0x28>
 16a:	5d 9b       	sbis	0x0b, 5	; 11
 16c:	fe cf       	rjmp	.-4      	; 0x16a <usart_send_byte+0x12>
 16e:	fb 01       	movw	r30, r22
 170:	80 81       	ld	r24, Z
 172:	8c b9       	out	0x0c, r24	; 12
 174:	85 e1       	ldi	r24, 0x15	; 21
 176:	08 95       	ret
 178:	86 e1       	ldi	r24, 0x16	; 22
 17a:	08 95       	ret
 17c:	86 e1       	ldi	r24, 0x16	; 22
 17e:	08 95       	ret
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	08 95       	ret

00000184 <usart_set_isr_TXC_callback>:


usart_ret_types usart_set_isr_TXC_callback(usart_t * usart_obj,void (*vptr_cb)(void))
{
	usart_ret_types ret_val=NO_USART_ERRORS;
	if ( (usart_obj != NULL) && (vptr_cb != NULL) )
 184:	00 97       	sbiw	r24, 0x00	; 0
 186:	79 f0       	breq	.+30     	; 0x1a6 <usart_set_isr_TXC_callback+0x22>
 188:	61 15       	cp	r22, r1
 18a:	71 05       	cpc	r23, r1
 18c:	71 f0       	breq	.+28     	; 0x1aa <usart_set_isr_TXC_callback+0x26>
	{
		if (usart_obj->obj_device_state == INITIATED)
 18e:	fc 01       	movw	r30, r24
 190:	25 81       	ldd	r18, Z+5	; 0x05
 192:	21 30       	cpi	r18, 0x01	; 1
 194:	61 f4       	brne	.+24     	; 0x1ae <usart_set_isr_TXC_callback+0x2a>
		{
			usart_obj->obj_vptr_TXC_cb=vptr_cb;
 196:	71 87       	std	Z+9, r23	; 0x09
 198:	60 87       	std	Z+8, r22	; 0x08
			vptr_TXC_cb=vptr_cb;
 19a:	70 93 67 00 	sts	0x0067, r23	; 0x800067 <vptr_TXC_cb+0x1>
 19e:	60 93 66 00 	sts	0x0066, r22	; 0x800066 <vptr_TXC_cb>
}


usart_ret_types usart_set_isr_TXC_callback(usart_t * usart_obj,void (*vptr_cb)(void))
{
	usart_ret_types ret_val=NO_USART_ERRORS;
 1a2:	85 e1       	ldi	r24, 0x15	; 21
 1a4:	05 c0       	rjmp	.+10     	; 0x1b0 <usart_set_isr_TXC_callback+0x2c>
			ret_val=NOT_INITIATED;
		}
	}
	else
	{
		ret_val=INVALID_PARAMS;
 1a6:	86 e1       	ldi	r24, 0x16	; 22
 1a8:	03 c0       	rjmp	.+6      	; 0x1b0 <usart_set_isr_TXC_callback+0x2c>
 1aa:	86 e1       	ldi	r24, 0x16	; 22
 1ac:	01 c0       	rjmp	.+2      	; 0x1b0 <usart_set_isr_TXC_callback+0x2c>
			vptr_TXC_cb=vptr_cb;

		}
		else
		{
			ret_val=NOT_INITIATED;
 1ae:	80 e0       	ldi	r24, 0x00	; 0
	}
	else
	{
		ret_val=INVALID_PARAMS;
	}
	PORTA=0xff;
 1b0:	9f ef       	ldi	r25, 0xFF	; 255
 1b2:	9b bb       	out	0x1b, r25	; 27
	return ret_val;
	
	
}
 1b4:	08 95       	ret

000001b6 <__vector_13>:

ISR(USART_RXC_vect)
{
 1b6:	1f 92       	push	r1
 1b8:	0f 92       	push	r0
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	0f 92       	push	r0
 1be:	11 24       	eor	r1, r1
 1c0:	2f 93       	push	r18
 1c2:	3f 93       	push	r19
 1c4:	4f 93       	push	r20
 1c6:	5f 93       	push	r21
 1c8:	6f 93       	push	r22
 1ca:	7f 93       	push	r23
 1cc:	8f 93       	push	r24
 1ce:	9f 93       	push	r25
 1d0:	af 93       	push	r26
 1d2:	bf 93       	push	r27
 1d4:	ef 93       	push	r30
 1d6:	ff 93       	push	r31
	if (vptr_RXC_cb)
 1d8:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <__data_end>
 1dc:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <__data_end+0x1>
 1e0:	30 97       	sbiw	r30, 0x00	; 0
 1e2:	09 f0       	breq	.+2      	; 0x1e6 <__vector_13+0x30>
	{
		vptr_RXC_cb();
 1e4:	09 95       	icall
	}
		
}
 1e6:	ff 91       	pop	r31
 1e8:	ef 91       	pop	r30
 1ea:	bf 91       	pop	r27
 1ec:	af 91       	pop	r26
 1ee:	9f 91       	pop	r25
 1f0:	8f 91       	pop	r24
 1f2:	7f 91       	pop	r23
 1f4:	6f 91       	pop	r22
 1f6:	5f 91       	pop	r21
 1f8:	4f 91       	pop	r20
 1fa:	3f 91       	pop	r19
 1fc:	2f 91       	pop	r18
 1fe:	0f 90       	pop	r0
 200:	0f be       	out	0x3f, r0	; 63
 202:	0f 90       	pop	r0
 204:	1f 90       	pop	r1
 206:	18 95       	reti

00000208 <__vector_14>:

ISR(USART_UDRE_vect)
{
 208:	1f 92       	push	r1
 20a:	0f 92       	push	r0
 20c:	0f b6       	in	r0, 0x3f	; 63
 20e:	0f 92       	push	r0
 210:	11 24       	eor	r1, r1
 212:	2f 93       	push	r18
 214:	3f 93       	push	r19
 216:	4f 93       	push	r20
 218:	5f 93       	push	r21
 21a:	6f 93       	push	r22
 21c:	7f 93       	push	r23
 21e:	8f 93       	push	r24
 220:	9f 93       	push	r25
 222:	af 93       	push	r26
 224:	bf 93       	push	r27
 226:	ef 93       	push	r30
 228:	ff 93       	push	r31
	if (vptr_TXC_cb)
 22a:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <vptr_TXC_cb>
 22e:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <vptr_TXC_cb+0x1>
 232:	30 97       	sbiw	r30, 0x00	; 0
 234:	09 f0       	breq	.+2      	; 0x238 <__vector_14+0x30>
	{
		vptr_TXC_cb();
 236:	09 95       	icall
	}	
 238:	ff 91       	pop	r31
 23a:	ef 91       	pop	r30
 23c:	bf 91       	pop	r27
 23e:	af 91       	pop	r26
 240:	9f 91       	pop	r25
 242:	8f 91       	pop	r24
 244:	7f 91       	pop	r23
 246:	6f 91       	pop	r22
 248:	5f 91       	pop	r21
 24a:	4f 91       	pop	r20
 24c:	3f 91       	pop	r19
 24e:	2f 91       	pop	r18
 250:	0f 90       	pop	r0
 252:	0f be       	out	0x3f, r0	; 63
 254:	0f 90       	pop	r0
 256:	1f 90       	pop	r1
 258:	18 95       	reti

0000025a <usart_send>:

//#include <avr/io.h>
#include "hal_USART.h"
	usart_t usart_1;
void usart_send()
{
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
 25e:	1f 92       	push	r1
 260:	cd b7       	in	r28, 0x3d	; 61
 262:	de b7       	in	r29, 0x3e	; 62
	msa_u8 temp='M';
 264:	8d e4       	ldi	r24, 0x4D	; 77
 266:	89 83       	std	Y+1, r24	; 0x01
	usart_send_byte(&usart_1,&temp);
 268:	be 01       	movw	r22, r28
 26a:	6f 5f       	subi	r22, 0xFF	; 255
 26c:	7f 4f       	sbci	r23, 0xFF	; 255
 26e:	88 e6       	ldi	r24, 0x68	; 104
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	0e 94 ac 00 	call	0x158	; 0x158 <usart_send_byte>
}
 276:	0f 90       	pop	r0
 278:	df 91       	pop	r29
 27a:	cf 91       	pop	r28
 27c:	08 95       	ret

0000027e <main>:
int main(void)
{
    /* Replace with your application code */

	usart_init(&usart_1,B_SENDER_N_RECEIVER,ONE_STP_BIT,NO_PARITY,EIGHT,INTERRUPT_DRIVEN,FALLING_EDGE); 
 27e:	cc 24       	eor	r12, r12
 280:	c3 94       	inc	r12
 282:	e1 2c       	mov	r14, r1
 284:	03 e0       	ldi	r16, 0x03	; 3
 286:	20 e0       	ldi	r18, 0x00	; 0
 288:	40 e0       	ldi	r20, 0x00	; 0
 28a:	63 e0       	ldi	r22, 0x03	; 3
 28c:	88 e6       	ldi	r24, 0x68	; 104
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	0e 94 49 00 	call	0x92	; 0x92 <usart_init>
	//msa_u8 *arr_add=(msa_u8 *)"you gave me this =>";
	//msa_u8 *arr_add2=(msa_u8 *)"put your val ";
	//msa_u8 *got_arr;
	//usart_set_isr_TXC_callback(&usart_1,usart_send);
	//msa_u8 arr[10];
	usart_set_isr_TXC_callback(&usart_1,usart_send);
 294:	6d e2       	ldi	r22, 0x2D	; 45
 296:	71 e0       	ldi	r23, 0x01	; 1
 298:	88 e6       	ldi	r24, 0x68	; 104
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	0e 94 c2 00 	call	0x184	; 0x184 <usart_set_isr_TXC_callback>
    {
		
		//usart_receive_arr(&usart_1,arr,10);
		//usart_send_arr(&usart_1,arr);
		
		PORTA=0xff;
 2a0:	9f ef       	ldi	r25, 0xFF	; 255
		_delay_ms(500);
		PORTA=0x55;
 2a2:	85 e5       	ldi	r24, 0x55	; 85
    {
		
		//usart_receive_arr(&usart_1,arr,10);
		//usart_send_arr(&usart_1,arr);
		
		PORTA=0xff;
 2a4:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2a6:	2f ef       	ldi	r18, 0xFF	; 255
 2a8:	34 e3       	ldi	r19, 0x34	; 52
 2aa:	4c e0       	ldi	r20, 0x0C	; 12
 2ac:	21 50       	subi	r18, 0x01	; 1
 2ae:	30 40       	sbci	r19, 0x00	; 0
 2b0:	40 40       	sbci	r20, 0x00	; 0
 2b2:	e1 f7       	brne	.-8      	; 0x2ac <main+0x2e>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <main+0x38>
 2b6:	00 00       	nop
		_delay_ms(500);
		PORTA=0x55;
 2b8:	8b bb       	out	0x1b, r24	; 27
 2ba:	2f ef       	ldi	r18, 0xFF	; 255
 2bc:	34 e3       	ldi	r19, 0x34	; 52
 2be:	4c e0       	ldi	r20, 0x0C	; 12
 2c0:	21 50       	subi	r18, 0x01	; 1
 2c2:	30 40       	sbci	r19, 0x00	; 0
 2c4:	40 40       	sbci	r20, 0x00	; 0
 2c6:	e1 f7       	brne	.-8      	; 0x2c0 <main+0x42>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <main+0x4c>
 2ca:	00 00       	nop
 2cc:	eb cf       	rjmp	.-42     	; 0x2a4 <main+0x26>

000002ce <_exit>:
 2ce:	f8 94       	cli

000002d0 <__stop_program>:
 2d0:	ff cf       	rjmp	.-2      	; 0x2d0 <__stop_program>
