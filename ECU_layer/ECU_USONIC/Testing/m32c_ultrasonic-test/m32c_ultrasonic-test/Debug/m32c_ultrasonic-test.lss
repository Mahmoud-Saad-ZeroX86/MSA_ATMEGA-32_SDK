
m32c_ultrasonic-test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000019c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  00000210  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000240  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000759  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005f7  00000000  00000000  000009fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000300  00000000  00000000  00000ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  000012f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000369  00000000  00000000  0000133c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000016d  00000000  00000000  000016a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001812  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 cc 00 	jmp	0x198	; 0x198 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
static volatile int i = 0;      // interger  to access all though the program

int main(void)
{
	//usart_init();
	DDRC=0xff;
  7c:	8f ef       	ldi	r24, 0xFF	; 255
  7e:	84 bb       	out	0x14, r24	; 20
	DDRA=0xff;
  80:	8a bb       	out	0x1a, r24	; 26
	DDRB=0xff;
  82:	87 bb       	out	0x17, r24	; 23
	PORTB=0x55;
  84:	85 e5       	ldi	r24, 0x55	; 85
  86:	88 bb       	out	0x18, r24	; 24
	DDRD &=~(1<<2);      //setting the interrupt pin as an input
  88:	8a 98       	cbi	0x11, 2	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8a:	83 ed       	ldi	r24, 0xD3	; 211
  8c:	90 e3       	ldi	r25, 0x30	; 48
  8e:	01 97       	sbiw	r24, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <main+0x12>
  92:	00 c0       	rjmp	.+0      	; 0x94 <main+0x18>
  94:	00 00       	nop
	_delay_ms(50);
	GICR|=(1<<INT0);     //enabling interrupt0
  96:	8b b7       	in	r24, 0x3b	; 59
  98:	80 64       	ori	r24, 0x40	; 64
  9a:	8b bf       	out	0x3b, r24	; 59
	MCUCR|=(1<<ISC00);   //setting interrupt triggering logic change
  9c:	85 b7       	in	r24, 0x35	; 53
  9e:	81 60       	ori	r24, 0x01	; 1
  a0:	85 bf       	out	0x35, r24	; 53
	sei();               //enabling global interrupts
  a2:	78 94       	sei
		_delay_us(15);		//triggering the sensor for 15usec
		PORTC &=~(1<<PINC0);
		_delay_ms(50);
		COUNTA = pulse/58;	//getting the distance based on formula on introduction
		//itoa(COUNTA,SHOWA,10);
		PORTA=COUNTA;
  a4:	2a e3       	ldi	r18, 0x3A	; 58
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	9f e9       	ldi	r25, 0x9F	; 159
  aa:	46 e8       	ldi	r20, 0x86	; 134
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	91 50       	subi	r25, 0x01	; 1
  b0:	40 40       	sbci	r20, 0x00	; 0
  b2:	80 40       	sbci	r24, 0x00	; 0
  b4:	e1 f7       	brne	.-8      	; 0xae <main+0x32>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <main+0x3c>
  b8:	00 00       	nop
    uint16_t COUNTA = 0; //storing digital output
	char SHOWA [3];//displaying digital output as it's sent as ascii
    while (1) 
    {
		_delay_ms(500);
		PORTB =~PORTB;
  ba:	88 b3       	in	r24, 0x18	; 24
  bc:	80 95       	com	r24
  be:	88 bb       	out	0x18, r24	; 24
		PORTC|=(1<<PINC0);
  c0:	a8 9a       	sbi	0x15, 0	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	95 e0       	ldi	r25, 0x05	; 5
  c4:	9a 95       	dec	r25
  c6:	f1 f7       	brne	.-4      	; 0xc4 <main+0x48>
		_delay_us(15);		//triggering the sensor for 15usec
		PORTC &=~(1<<PINC0);
  c8:	a8 98       	cbi	0x15, 0	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ca:	83 ed       	ldi	r24, 0xD3	; 211
  cc:	90 e3       	ldi	r25, 0x30	; 48
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <main+0x52>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <main+0x58>
  d4:	00 00       	nop
		_delay_ms(50);
		COUNTA = pulse/58;	//getting the distance based on formula on introduction
  d6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <pulse>
  da:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <pulse+0x1>
		//itoa(COUNTA,SHOWA,10);
		PORTA=COUNTA;
  de:	b9 01       	movw	r22, r18
  e0:	0e 94 a4 00 	call	0x148	; 0x148 <__divmodhi4>
  e4:	6b bb       	out	0x1b, r22	; 27
  e6:	e0 cf       	rjmp	.-64     	; 0xa8 <main+0x2c>

000000e8 <__vector_1>:
}


ISR(INT0_vect)//interrupt service routine when there is a change in logic level

{
  e8:	1f 92       	push	r1
  ea:	0f 92       	push	r0
  ec:	0f b6       	in	r0, 0x3f	; 63
  ee:	0f 92       	push	r0
  f0:	11 24       	eor	r1, r1
  f2:	8f 93       	push	r24
  f4:	9f 93       	push	r25

	if (i==1)//when logic from HIGH to LOW
  f6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  fa:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	69 f4       	brne	.+26     	; 0x11c <__vector_1+0x34>

	{

		TCCR1B=0;//disabling counter
 102:	1e bc       	out	0x2e, r1	; 46

		pulse=TCNT1;//count memory is updated to integer
 104:	8c b5       	in	r24, 0x2c	; 44
 106:	9d b5       	in	r25, 0x2d	; 45
 108:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <pulse+0x1>
 10c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <pulse>

		TCNT1=0;//resetting the counter memory
 110:	1d bc       	out	0x2d, r1	; 45
 112:	1c bc       	out	0x2c, r1	; 44

		i=0;
 114:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
 118:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>

	}

	if (i==0)//when logic change from LOW to HIGH
 11c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 120:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 124:	89 2b       	or	r24, r25
 126:	49 f4       	brne	.+18     	; 0x13a <__vector_1+0x52>

	{

		TCCR1B|=(1<<CS10);//enabling counter
 128:	8e b5       	in	r24, 0x2e	; 46
 12a:	81 60       	ori	r24, 0x01	; 1
 12c:	8e bd       	out	0x2e, r24	; 46

		i=1;
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
 136:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>

	}

 13a:	9f 91       	pop	r25
 13c:	8f 91       	pop	r24
 13e:	0f 90       	pop	r0
 140:	0f be       	out	0x3f, r0	; 63
 142:	0f 90       	pop	r0
 144:	1f 90       	pop	r1
 146:	18 95       	reti

00000148 <__divmodhi4>:
 148:	97 fb       	bst	r25, 7
 14a:	07 2e       	mov	r0, r23
 14c:	16 f4       	brtc	.+4      	; 0x152 <__divmodhi4+0xa>
 14e:	00 94       	com	r0
 150:	07 d0       	rcall	.+14     	; 0x160 <__divmodhi4_neg1>
 152:	77 fd       	sbrc	r23, 7
 154:	09 d0       	rcall	.+18     	; 0x168 <__divmodhi4_neg2>
 156:	0e 94 b8 00 	call	0x170	; 0x170 <__udivmodhi4>
 15a:	07 fc       	sbrc	r0, 7
 15c:	05 d0       	rcall	.+10     	; 0x168 <__divmodhi4_neg2>
 15e:	3e f4       	brtc	.+14     	; 0x16e <__divmodhi4_exit>

00000160 <__divmodhi4_neg1>:
 160:	90 95       	com	r25
 162:	81 95       	neg	r24
 164:	9f 4f       	sbci	r25, 0xFF	; 255
 166:	08 95       	ret

00000168 <__divmodhi4_neg2>:
 168:	70 95       	com	r23
 16a:	61 95       	neg	r22
 16c:	7f 4f       	sbci	r23, 0xFF	; 255

0000016e <__divmodhi4_exit>:
 16e:	08 95       	ret

00000170 <__udivmodhi4>:
 170:	aa 1b       	sub	r26, r26
 172:	bb 1b       	sub	r27, r27
 174:	51 e1       	ldi	r21, 0x11	; 17
 176:	07 c0       	rjmp	.+14     	; 0x186 <__udivmodhi4_ep>

00000178 <__udivmodhi4_loop>:
 178:	aa 1f       	adc	r26, r26
 17a:	bb 1f       	adc	r27, r27
 17c:	a6 17       	cp	r26, r22
 17e:	b7 07       	cpc	r27, r23
 180:	10 f0       	brcs	.+4      	; 0x186 <__udivmodhi4_ep>
 182:	a6 1b       	sub	r26, r22
 184:	b7 0b       	sbc	r27, r23

00000186 <__udivmodhi4_ep>:
 186:	88 1f       	adc	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	5a 95       	dec	r21
 18c:	a9 f7       	brne	.-22     	; 0x178 <__udivmodhi4_loop>
 18e:	80 95       	com	r24
 190:	90 95       	com	r25
 192:	bc 01       	movw	r22, r24
 194:	cd 01       	movw	r24, r26
 196:	08 95       	ret

00000198 <_exit>:
 198:	f8 94       	cli

0000019a <__stop_program>:
 19a:	ff cf       	rjmp	.-2      	; 0x19a <__stop_program>
