
ECU_LCD-P216.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000574  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000005e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  000005e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000618  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000654  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000145f  00000000  00000000  000006fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000904  00000000  00000000  00001b5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008ef  00000000  00000000  0000245f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000178  00000000  00000000  00002d50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000825  00000000  00000000  00002ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e3d  00000000  00000000  000036ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  0000452a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 81 02 	call	0x502	; 0x502 <main>
  74:	0c 94 b8 02 	jmp	0x570	; 0x570 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <set_pin_output>:
	}
	
	
	
	return b_ret_val;
}
  7c:	9c 01       	movw	r18, r24
  7e:	20 53       	subi	r18, 0x30	; 48
  80:	31 09       	sbc	r19, r1
  82:	2a 30       	cpi	r18, 0x0A	; 10
  84:	31 05       	cpc	r19, r1
  86:	78 f4       	brcc	.+30     	; 0xa6 <set_pin_output+0x2a>
  88:	68 30       	cpi	r22, 0x08	; 8
  8a:	78 f4       	brcc	.+30     	; 0xaa <set_pin_output+0x2e>
  8c:	fc 01       	movw	r30, r24
  8e:	41 81       	ldd	r20, Z+1	; 0x01
  90:	21 e0       	ldi	r18, 0x01	; 1
  92:	30 e0       	ldi	r19, 0x00	; 0
  94:	02 c0       	rjmp	.+4      	; 0x9a <set_pin_output+0x1e>
  96:	22 0f       	add	r18, r18
  98:	33 1f       	adc	r19, r19
  9a:	6a 95       	dec	r22
  9c:	e2 f7       	brpl	.-8      	; 0x96 <set_pin_output+0x1a>
  9e:	24 2b       	or	r18, r20
  a0:	21 83       	std	Z+1, r18	; 0x01
  a2:	80 e0       	ldi	r24, 0x00	; 0
  a4:	08 95       	ret
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	08 95       	ret
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	08 95       	ret

000000ae <set_pin_low>:
#endif

gpio_errors set_pin_low(gpio_bases *base,gpio_pin_no pin_no)
{
	gpio_errors b_ret_val=NO_ERRORS;
	if( (base >= (gpio_bases*) BASE_D) && (base <= (gpio_bases*) BASE_A) && ( (pin_no >= PIN_ZERO) && (pin_no <= PIN_SEVEN) ) )
  ae:	9c 01       	movw	r18, r24
  b0:	20 53       	subi	r18, 0x30	; 48
  b2:	31 09       	sbc	r19, r1
  b4:	2a 30       	cpi	r18, 0x0A	; 10
  b6:	31 05       	cpc	r19, r1
  b8:	80 f4       	brcc	.+32     	; 0xda <set_pin_low+0x2c>
  ba:	68 30       	cpi	r22, 0x08	; 8
  bc:	80 f4       	brcc	.+32     	; 0xde <set_pin_low+0x30>
	{
		(*(volatile msa_u8 *)(base+PORT_OFFSET))&=~(1<<pin_no);
  be:	fc 01       	movw	r30, r24
  c0:	42 81       	ldd	r20, Z+2	; 0x02
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <set_pin_low+0x1e>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <set_pin_low+0x1a>
  d0:	20 95       	com	r18
  d2:	24 23       	and	r18, r20
  d4:	22 83       	std	Z+2, r18	; 0x02
}
#endif

gpio_errors set_pin_low(gpio_bases *base,gpio_pin_no pin_no)
{
	gpio_errors b_ret_val=NO_ERRORS;
  d6:	80 e0       	ldi	r24, 0x00	; 0
	if( (base >= (gpio_bases*) BASE_D) && (base <= (gpio_bases*) BASE_A) && ( (pin_no >= PIN_ZERO) && (pin_no <= PIN_SEVEN) ) )
	{
		(*(volatile msa_u8 *)(base+PORT_OFFSET))&=~(1<<pin_no);
  d8:	08 95       	ret
	}
	else
	{
		b_ret_val=INVALID_PARAMS;
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	08 95       	ret
  de:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return b_ret_val;
}
  e0:	08 95       	ret

000000e2 <set_pin_high>:
gpio_errors set_pin_high(gpio_bases *base,gpio_pin_no pin_no)
{
	gpio_errors b_ret_val=NO_ERRORS;
	if( (base >= (gpio_bases*) BASE_D) && (base <= (gpio_bases*) BASE_A) && ( (pin_no >= PIN_ZERO) && (pin_no <= PIN_SEVEN) ) )
  e2:	9c 01       	movw	r18, r24
  e4:	20 53       	subi	r18, 0x30	; 48
  e6:	31 09       	sbc	r19, r1
  e8:	2a 30       	cpi	r18, 0x0A	; 10
  ea:	31 05       	cpc	r19, r1
  ec:	78 f4       	brcc	.+30     	; 0x10c <set_pin_high+0x2a>
  ee:	68 30       	cpi	r22, 0x08	; 8
  f0:	78 f4       	brcc	.+30     	; 0x110 <set_pin_high+0x2e>
	{
		(*(volatile msa_u8 *)(base+PORT_OFFSET))|=(1<<pin_no);
  f2:	fc 01       	movw	r30, r24
  f4:	42 81       	ldd	r20, Z+2	; 0x02
  f6:	21 e0       	ldi	r18, 0x01	; 1
  f8:	30 e0       	ldi	r19, 0x00	; 0
  fa:	02 c0       	rjmp	.+4      	; 0x100 <set_pin_high+0x1e>
  fc:	22 0f       	add	r18, r18
  fe:	33 1f       	adc	r19, r19
 100:	6a 95       	dec	r22
 102:	e2 f7       	brpl	.-8      	; 0xfc <set_pin_high+0x1a>
 104:	24 2b       	or	r18, r20
 106:	22 83       	std	Z+2, r18	; 0x02
	
	return b_ret_val;
}
gpio_errors set_pin_high(gpio_bases *base,gpio_pin_no pin_no)
{
	gpio_errors b_ret_val=NO_ERRORS;
 108:	80 e0       	ldi	r24, 0x00	; 0
	if( (base >= (gpio_bases*) BASE_D) && (base <= (gpio_bases*) BASE_A) && ( (pin_no >= PIN_ZERO) && (pin_no <= PIN_SEVEN) ) )
	{
		(*(volatile msa_u8 *)(base+PORT_OFFSET))|=(1<<pin_no);
 10a:	08 95       	ret
	}
	else
	{
		b_ret_val=INVALID_PARAMS;
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	08 95       	ret
 110:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return b_ret_val;
}
 112:	08 95       	ret

00000114 <lcd_comm_out>:
	return ret_val;
}


lcd_return_types lcd_comm_out(g_lcd_t* lcd_obj,lcd_commands_t lcd_command)  //optimize the repeation of the delay func
{
 114:	1f 93       	push	r17
 116:	cf 93       	push	r28
 118:	df 93       	push	r29
	lcd_return_types ret_val=NO_LCD_ERRORS;
	if( (lcd_obj != NULL) && ( (lcd_command >=0x01) && (lcd_command <= 0xc0) ) )
 11a:	00 97       	sbiw	r24, 0x00	; 0
 11c:	09 f4       	brne	.+2      	; 0x120 <lcd_comm_out+0xc>
 11e:	ab c0       	rjmp	.+342    	; 0x276 <lcd_comm_out+0x162>
 120:	2f ef       	ldi	r18, 0xFF	; 255
 122:	26 0f       	add	r18, r22
 124:	20 3c       	cpi	r18, 0xC0	; 192
 126:	08 f0       	brcs	.+2      	; 0x12a <lcd_comm_out+0x16>
 128:	a8 c0       	rjmp	.+336    	; 0x27a <lcd_comm_out+0x166>
	{
		if (lcd_obj->obj_device_state != INITIATED)
 12a:	fc 01       	movw	r30, r24
 12c:	26 81       	ldd	r18, Z+6	; 0x06
 12e:	21 30       	cpi	r18, 0x01	; 1
 130:	09 f0       	breq	.+2      	; 0x134 <lcd_comm_out+0x20>
 132:	a5 c0       	rjmp	.+330    	; 0x27e <lcd_comm_out+0x16a>
 134:	16 2f       	mov	r17, r22
 136:	ec 01       	movw	r28, r24
		{
			ret_val=DEVICE_NOT_INITIATED;
			return ret_val;
		}
		set_pin_low((gpio_bases *)lcd_obj->obj_comm_port,lcd_obj->obj_RS_pin);
 138:	82 81       	ldd	r24, Z+2	; 0x02
 13a:	63 81       	ldd	r22, Z+3	; 0x03
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 57 00 	call	0xae	; 0xae <set_pin_low>
			#if NO_OF_DATA_LINES == 4
			DATA_TEMP =lcd_command;
 142:	10 93 60 00 	sts	0x0060, r17	; 0x800060 <_edata>
			//4bits mode>>>many if statements i know but this is to reduce the repetition of the high to low pulse and the delay and so on>>>then it's for optimization 
			if (lcd_obj->obj_data_pins_beginning == PORT_PIN_FOUR)
 146:	89 81       	ldd	r24, Y+1	; 0x01
 148:	84 30       	cpi	r24, 0x04	; 4
 14a:	41 f4       	brne	.+16     	; 0x15c <lcd_comm_out+0x48>
			{
				//the high nipple
				PORTD= (PORTD & 0x0f) | ((msa_u8)lcd_command & 0xf0);
 14c:	62 b3       	in	r22, 0x12	; 18
 14e:	86 2f       	mov	r24, r22
 150:	8f 70       	andi	r24, 0x0F	; 15
 152:	61 2f       	mov	r22, r17
 154:	60 7f       	andi	r22, 0xF0	; 240
 156:	68 2b       	or	r22, r24
 158:	62 bb       	out	0x12, r22	; 18
 15a:	2c c0       	rjmp	.+88     	; 0x1b4 <lcd_comm_out+0xa0>
			} 
			else if (lcd_obj->obj_data_pins_beginning == PORT_PIN_THREE)
 15c:	83 30       	cpi	r24, 0x03	; 3
 15e:	49 f4       	brne	.+18     	; 0x172 <lcd_comm_out+0x5e>
			{
				//the high nipple
				PORTD= (PORTD & 0x87) | ( (lcd_command & 0xf0) >> 1 );
 160:	82 b3       	in	r24, 0x12	; 18
 162:	61 2f       	mov	r22, r17
 164:	60 7f       	andi	r22, 0xF0	; 240
 166:	66 95       	lsr	r22
 168:	18 2f       	mov	r17, r24
 16a:	17 78       	andi	r17, 0x87	; 135
 16c:	61 2b       	or	r22, r17
 16e:	62 bb       	out	0x12, r22	; 18
 170:	21 c0       	rjmp	.+66     	; 0x1b4 <lcd_comm_out+0xa0>
			}
			else if (lcd_obj->obj_data_pins_beginning == PORT_PIN_TWO)
 172:	82 30       	cpi	r24, 0x02	; 2
 174:	49 f4       	brne	.+18     	; 0x188 <lcd_comm_out+0x74>
			{
				//the high nipple
				PORTD= (PORTD & 0xc3) | ( (lcd_command & 0xf0) >> 2 );
 176:	82 b3       	in	r24, 0x12	; 18
 178:	61 2f       	mov	r22, r17
 17a:	60 7f       	andi	r22, 0xF0	; 240
 17c:	66 95       	lsr	r22
 17e:	66 95       	lsr	r22
 180:	83 7c       	andi	r24, 0xC3	; 195
 182:	68 2b       	or	r22, r24
 184:	62 bb       	out	0x12, r22	; 18
 186:	16 c0       	rjmp	.+44     	; 0x1b4 <lcd_comm_out+0xa0>
			}
			else if (lcd_obj->obj_data_pins_beginning == PORT_PIN_ONE)
 188:	81 30       	cpi	r24, 0x01	; 1
 18a:	51 f4       	brne	.+20     	; 0x1a0 <lcd_comm_out+0x8c>
			{
				//the high nipple
				PORTD= (PORTD & 0xe1) | ( (lcd_command & 0xf0) >> 3 );
 18c:	82 b3       	in	r24, 0x12	; 18
 18e:	61 2f       	mov	r22, r17
 190:	60 7f       	andi	r22, 0xF0	; 240
 192:	66 95       	lsr	r22
 194:	66 95       	lsr	r22
 196:	66 95       	lsr	r22
 198:	81 7e       	andi	r24, 0xE1	; 225
 19a:	68 2b       	or	r22, r24
 19c:	62 bb       	out	0x12, r22	; 18
 19e:	0a c0       	rjmp	.+20     	; 0x1b4 <lcd_comm_out+0xa0>
			}
			else if (lcd_obj->obj_data_pins_beginning == PORT_PIN_ZERO)
 1a0:	81 11       	cpse	r24, r1
 1a2:	08 c0       	rjmp	.+16     	; 0x1b4 <lcd_comm_out+0xa0>
			{
				//the high nipple
				PORTD= (PORTD & 0xf0) | ( lcd_command >> 4);
 1a4:	62 b3       	in	r22, 0x12	; 18
 1a6:	86 2f       	mov	r24, r22
 1a8:	80 7f       	andi	r24, 0xF0	; 240
 1aa:	61 2f       	mov	r22, r17
 1ac:	62 95       	swap	r22
 1ae:	6f 70       	andi	r22, 0x0F	; 15
 1b0:	68 2b       	or	r22, r24
 1b2:	62 bb       	out	0x12, r22	; 18
			}
	
			//a high to low pulse to make tthe lcd latch the data in
			set_pin_high((gpio_bases *)lcd_obj->obj_comm_port,lcd_obj->obj_E_pin);
 1b4:	8a 81       	ldd	r24, Y+2	; 0x02
 1b6:	6d 81       	ldd	r22, Y+5	; 0x05
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	0e 94 71 00 	call	0xe2	; 0xe2 <set_pin_high>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1be:	00 00       	nop
			_delay_us(1);
			set_pin_low((gpio_bases *)lcd_obj->obj_comm_port,lcd_obj->obj_E_pin);
 1c0:	8a 81       	ldd	r24, Y+2	; 0x02
 1c2:	6d 81       	ldd	r22, Y+5	; 0x05
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	0e 94 57 00 	call	0xae	; 0xae <set_pin_low>
	
	
			lcd_command=DATA_TEMP ;
 1ca:	10 91 60 00 	lds	r17, 0x0060	; 0x800060 <_edata>
 1ce:	f6 e0       	ldi	r31, 0x06	; 6
 1d0:	fa 95       	dec	r31
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <lcd_comm_out+0xbc>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <lcd_comm_out+0xc2>
			_delay_us(20);
	
	
			if (lcd_obj->obj_data_pins_beginning == PORT_PIN_FOUR)
 1d6:	89 81       	ldd	r24, Y+1	; 0x01
 1d8:	84 30       	cpi	r24, 0x04	; 4
 1da:	51 f4       	brne	.+20     	; 0x1f0 <lcd_comm_out+0xdc>
			{
				//the low nipple
				PORTD= ( (PORTD & 0x0f) | ((lcd_command & 0x0f)<<4) );
 1dc:	82 b3       	in	r24, 0x12	; 18
 1de:	28 2f       	mov	r18, r24
 1e0:	2f 70       	andi	r18, 0x0F	; 15
 1e2:	30 e1       	ldi	r19, 0x10	; 16
 1e4:	13 9f       	mul	r17, r19
 1e6:	c0 01       	movw	r24, r0
 1e8:	11 24       	eor	r1, r1
 1ea:	82 2b       	or	r24, r18
 1ec:	82 bb       	out	0x12, r24	; 18
 1ee:	28 c0       	rjmp	.+80     	; 0x240 <lcd_comm_out+0x12c>
			}
			else if (lcd_obj->obj_data_pins_beginning == PORT_PIN_THREE)
 1f0:	83 30       	cpi	r24, 0x03	; 3
 1f2:	51 f4       	brne	.+20     	; 0x208 <lcd_comm_out+0xf4>
			{
				//the low nipple
				PORTD= ( (PORTD & 0x87) | ((lcd_command & 0x0f)<<3) );
 1f4:	82 b3       	in	r24, 0x12	; 18
 1f6:	91 2f       	mov	r25, r17
 1f8:	9f 70       	andi	r25, 0x0F	; 15
 1fa:	99 0f       	add	r25, r25
 1fc:	99 0f       	add	r25, r25
 1fe:	99 0f       	add	r25, r25
 200:	87 78       	andi	r24, 0x87	; 135
 202:	89 2b       	or	r24, r25
 204:	82 bb       	out	0x12, r24	; 18
 206:	1c c0       	rjmp	.+56     	; 0x240 <lcd_comm_out+0x12c>
			}
			else if (lcd_obj->obj_data_pins_beginning == PORT_PIN_TWO)
 208:	82 30       	cpi	r24, 0x02	; 2
 20a:	49 f4       	brne	.+18     	; 0x21e <lcd_comm_out+0x10a>
			{
				//the low nipple
				PORTD= ( (PORTD & 0xc3) | ((lcd_command & 0x0f)<<2) );
 20c:	82 b3       	in	r24, 0x12	; 18
 20e:	91 2f       	mov	r25, r17
 210:	9f 70       	andi	r25, 0x0F	; 15
 212:	99 0f       	add	r25, r25
 214:	99 0f       	add	r25, r25
 216:	83 7c       	andi	r24, 0xC3	; 195
 218:	89 2b       	or	r24, r25
 21a:	82 bb       	out	0x12, r24	; 18
 21c:	11 c0       	rjmp	.+34     	; 0x240 <lcd_comm_out+0x12c>
			}
			else if (lcd_obj->obj_data_pins_beginning == PORT_PIN_ONE)
 21e:	81 30       	cpi	r24, 0x01	; 1
 220:	41 f4       	brne	.+16     	; 0x232 <lcd_comm_out+0x11e>
			{
				//the low nipple
				PORTD= ( (PORTD & 0xe1) | ((lcd_command & 0x0f)<<1) );
 222:	82 b3       	in	r24, 0x12	; 18
 224:	91 2f       	mov	r25, r17
 226:	9f 70       	andi	r25, 0x0F	; 15
 228:	99 0f       	add	r25, r25
 22a:	81 7e       	andi	r24, 0xE1	; 225
 22c:	89 2b       	or	r24, r25
 22e:	82 bb       	out	0x12, r24	; 18
 230:	07 c0       	rjmp	.+14     	; 0x240 <lcd_comm_out+0x12c>
			}
			else									    //PORT_PIN_ZERO
			{
				//the low nipple
				PORTD= ( (PORTD & 0xf0) | (lcd_command  & 0x0f) );
 232:	82 b3       	in	r24, 0x12	; 18
 234:	98 2f       	mov	r25, r24
 236:	90 7f       	andi	r25, 0xF0	; 240
 238:	81 2f       	mov	r24, r17
 23a:	8f 70       	andi	r24, 0x0F	; 15
 23c:	89 2b       	or	r24, r25
 23e:	82 bb       	out	0x12, r24	; 18
	
			#error "invalid number of data lines.it can be 4 or 8 otherwise error"
			#endif
		
			//a high to low pulse to make tthe lcd latch the data in
			set_pin_high((gpio_bases *)lcd_obj->obj_comm_port,lcd_obj->obj_E_pin);
 240:	8a 81       	ldd	r24, Y+2	; 0x02
 242:	6d 81       	ldd	r22, Y+5	; 0x05
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	0e 94 71 00 	call	0xe2	; 0xe2 <set_pin_high>
 24a:	00 00       	nop
			_delay_us(1);
			set_pin_low((gpio_bases *)lcd_obj->obj_comm_port,lcd_obj->obj_E_pin);
 24c:	8a 81       	ldd	r24, Y+2	; 0x02
 24e:	6d 81       	ldd	r22, Y+5	; 0x05
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	0e 94 57 00 	call	0xae	; 0xae <set_pin_low>
		
		
			//a delay after each command
			if ( (lcd_command == RETURN_HOME) || (lcd_command == CLEAR_SCREEN) )
 256:	11 50       	subi	r17, 0x01	; 1
 258:	12 30       	cpi	r17, 0x02	; 2
 25a:	40 f4       	brcc	.+16     	; 0x26c <lcd_comm_out+0x158>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 25c:	83 ef       	ldi	r24, 0xF3	; 243
 25e:	91 e0       	ldi	r25, 0x01	; 1
 260:	01 97       	sbiw	r24, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <lcd_comm_out+0x14c>
 264:	00 c0       	rjmp	.+0      	; 0x266 <lcd_comm_out+0x152>
 266:	00 00       	nop
}


lcd_return_types lcd_comm_out(g_lcd_t* lcd_obj,lcd_commands_t lcd_command)  //optimize the repeation of the delay func
{
	lcd_return_types ret_val=NO_LCD_ERRORS;
 268:	80 e0       	ldi	r24, 0x00	; 0
 26a:	0a c0       	rjmp	.+20     	; 0x280 <lcd_comm_out+0x16c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 26c:	98 e2       	ldi	r25, 0x28	; 40
 26e:	9a 95       	dec	r25
 270:	f1 f7       	brne	.-4      	; 0x26e <lcd_comm_out+0x15a>
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	05 c0       	rjmp	.+10     	; 0x280 <lcd_comm_out+0x16c>
				_delay_us(120);
			}
	}
	else
	{
		ret_val = INVALID_LCD_PARAMS;
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	03 c0       	rjmp	.+6      	; 0x280 <lcd_comm_out+0x16c>
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	01 c0       	rjmp	.+2      	; 0x280 <lcd_comm_out+0x16c>
	if( (lcd_obj != NULL) && ( (lcd_command >=0x01) && (lcd_command <= 0xc0) ) )
	{
		if (lcd_obj->obj_device_state != INITIATED)
		{
			ret_val=DEVICE_NOT_INITIATED;
			return ret_val;
 27e:	82 e0       	ldi	r24, 0x02	; 2
	else
	{
		ret_val = INVALID_LCD_PARAMS;
	}
	return ret_val;
}
 280:	df 91       	pop	r29
 282:	cf 91       	pop	r28
 284:	1f 91       	pop	r17
 286:	08 95       	ret

00000288 <lcd_init>:
static msa_u8 DATA_TEMP;

lcd_return_types lcd_init(	g_lcd_t* lcd_obj,	 gpio_bases data_port,	beginning_of_data_pins	data_pins_beginning,
							gpio_bases comm_port,gpio_pin_no RS_pin,    gpio_pin_no RW_pin,gpio_pin_no E_pin
						 )
{
 288:	af 92       	push	r10
 28a:	bf 92       	push	r11
 28c:	cf 92       	push	r12
 28e:	ef 92       	push	r14
 290:	0f 93       	push	r16
 292:	cf 93       	push	r28
	lcd_return_types ret_val=NO_LCD_ERRORS;
	if ( (lcd_obj != NULL)		&& ( (data_port >= BASE_D) && (data_port <= BASE_A)) && ( (comm_port >= BASE_D) && (comm_port <= BASE_A))&&
 294:	00 97       	sbiw	r24, 0x00	; 0
 296:	09 f4       	brne	.+2      	; 0x29a <lcd_init+0x12>
 298:	5e c0       	rjmp	.+188    	; 0x356 <lcd_init+0xce>
 29a:	30 ed       	ldi	r19, 0xD0	; 208
 29c:	36 0f       	add	r19, r22
 29e:	3a 30       	cpi	r19, 0x0A	; 10
 2a0:	08 f0       	brcs	.+2      	; 0x2a4 <lcd_init+0x1c>
 2a2:	5b c0       	rjmp	.+182    	; 0x35a <lcd_init+0xd2>
 2a4:	30 ed       	ldi	r19, 0xD0	; 208
 2a6:	32 0f       	add	r19, r18
 2a8:	3a 30       	cpi	r19, 0x0A	; 10
 2aa:	08 f0       	brcs	.+2      	; 0x2ae <lcd_init+0x26>
 2ac:	58 c0       	rjmp	.+176    	; 0x35e <lcd_init+0xd6>
 2ae:	08 30       	cpi	r16, 0x08	; 8
 2b0:	08 f0       	brcs	.+2      	; 0x2b4 <lcd_init+0x2c>
 2b2:	57 c0       	rjmp	.+174    	; 0x362 <lcd_init+0xda>
		 ( (RS_pin >= PIN_ZERO) && (RS_pin <= PIN_SEVEN) ) && ( (RW_pin >= PIN_ZERO) && (RW_pin <= PIN_SEVEN) ) && ( (E_pin >= PIN_ZERO) && (E_pin <= PIN_SEVEN) )
 2b4:	37 e0       	ldi	r19, 0x07	; 7
 2b6:	3e 15       	cp	r19, r14
 2b8:	08 f4       	brcc	.+2      	; 0x2bc <lcd_init+0x34>
 2ba:	55 c0       	rjmp	.+170    	; 0x366 <lcd_init+0xde>
 2bc:	3c 15       	cp	r19, r12
 2be:	08 f4       	brcc	.+2      	; 0x2c2 <lcd_init+0x3a>
 2c0:	54 c0       	rjmp	.+168    	; 0x36a <lcd_init+0xe2>
	   )
	{
		
		#if NO_OF_DATA_LINES == 4
		//4bits mode
		if ( (data_pins_beginning < PORT_PIN_ZERO) || (data_pins_beginning > PORT_PIN_FOUR) )
 2c2:	45 30       	cpi	r20, 0x05	; 5
 2c4:	08 f0       	brcs	.+2      	; 0x2c8 <lcd_init+0x40>
 2c6:	53 c0       	rjmp	.+166    	; 0x36e <lcd_init+0xe6>
 2c8:	c4 2f       	mov	r28, r20
 2ca:	5c 01       	movw	r10, r24
		#else
		#error "invalid number of data lines.it can be 4 or 8 otherwise error"
		#endif
		
		//storing the configurations in the structure
		lcd_obj->obj_data_port=data_port;
 2cc:	fc 01       	movw	r30, r24
 2ce:	60 83       	st	Z, r22
		lcd_obj->obj_comm_port=comm_port;
 2d0:	22 83       	std	Z+2, r18	; 0x02
		lcd_obj->obj_E_pin=E_pin;
 2d2:	c5 82       	std	Z+5, r12	; 0x05
		lcd_obj->obj_RS_pin=RS_pin;
 2d4:	03 83       	std	Z+3, r16	; 0x03
		lcd_obj->obj_RW_pin=RW_pin;
 2d6:	e4 82       	std	Z+4, r14	; 0x04
		lcd_obj->obj_data_pins_beginning=data_pins_beginning;
 2d8:	41 83       	std	Z+1, r20	; 0x01
		lcd_obj->obj_device_state=INITIATED;
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	86 83       	std	Z+6, r24	; 0x06
		
		//actual initialization
		set_pin_output((gpio_bases *)lcd_obj->obj_comm_port,E_pin);
 2de:	6c 2d       	mov	r22, r12
 2e0:	82 2f       	mov	r24, r18
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	0e 94 3e 00 	call	0x7c	; 0x7c <set_pin_output>
		set_pin_output((gpio_bases *)lcd_obj->obj_comm_port,RS_pin);
 2e8:	f5 01       	movw	r30, r10
 2ea:	82 81       	ldd	r24, Z+2	; 0x02
 2ec:	60 2f       	mov	r22, r16
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	0e 94 3e 00 	call	0x7c	; 0x7c <set_pin_output>
		set_pin_output((gpio_bases *)lcd_obj->obj_comm_port,RW_pin);
 2f4:	f5 01       	movw	r30, r10
 2f6:	82 81       	ldd	r24, Z+2	; 0x02
 2f8:	6e 2d       	mov	r22, r14
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	0e 94 3e 00 	call	0x7c	; 0x7c <set_pin_output>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 300:	87 e8       	ldi	r24, 0x87	; 135
 302:	93 e1       	ldi	r25, 0x13	; 19
 304:	01 97       	sbiw	r24, 0x01	; 1
 306:	f1 f7       	brne	.-4      	; 0x304 <lcd_init+0x7c>
 308:	00 c0       	rjmp	.+0      	; 0x30a <lcd_init+0x82>
 30a:	00 00       	nop
		/*NOTE
		* RS == 0 >>COMMAND				RS == 1  >>DATA
		* RW == 0 >>WRITING TO LCD		RW == 1 >>READING FROM LCD
		* E  ==>>a high to low pulse must be applied so the lcd latches in the data on the data bus
		*/
		set_pin_low((gpio_bases *)lcd_obj->obj_comm_port,RS_pin);
 30c:	f5 01       	movw	r30, r10
 30e:	82 81       	ldd	r24, Z+2	; 0x02
 310:	60 2f       	mov	r22, r16
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	0e 94 57 00 	call	0xae	; 0xae <set_pin_low>
		set_pin_low((gpio_bases *)lcd_obj->obj_comm_port,RW_pin);
 318:	f5 01       	movw	r30, r10
 31a:	82 81       	ldd	r24, Z+2	; 0x02
 31c:	6e 2d       	mov	r22, r14
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	0e 94 57 00 	call	0xae	; 0xae <set_pin_low>
 324:	04 e0       	ldi	r16, 0x04	; 4
 326:	0c 0f       	add	r16, r28
		
		#if NO_OF_DATA_LINES == 4
		//4bits mode
		for (msa_u8 i=0;i<4;i++)
		{
			set_pin_output((gpio_bases *)lcd_obj->obj_data_port,data_pins_beginning+i);
 328:	f5 01       	movw	r30, r10
 32a:	80 81       	ld	r24, Z
 32c:	6c 2f       	mov	r22, r28
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	0e 94 3e 00 	call	0x7c	; 0x7c <set_pin_output>
 334:	cf 5f       	subi	r28, 0xFF	; 255
		set_pin_low((gpio_bases *)lcd_obj->obj_comm_port,RS_pin);
		set_pin_low((gpio_bases *)lcd_obj->obj_comm_port,RW_pin);
		
		#if NO_OF_DATA_LINES == 4
		//4bits mode
		for (msa_u8 i=0;i<4;i++)
 336:	0c 13       	cpse	r16, r28
 338:	f7 cf       	rjmp	.-18     	; 0x328 <lcd_init+0xa0>
		{
			set_pin_output((gpio_bases *)lcd_obj->obj_data_port,data_pins_beginning+i);
		}
		lcd_comm_out((g_lcd_t*) lcd_obj,INIT_4LINES_STEP_1);
 33a:	63 e3       	ldi	r22, 0x33	; 51
 33c:	c5 01       	movw	r24, r10
 33e:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_comm_out>
		lcd_comm_out((g_lcd_t*)lcd_obj,INIT_4LINES_STEP_2);
 342:	62 e3       	ldi	r22, 0x32	; 50
 344:	c5 01       	movw	r24, r10
 346:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_comm_out>
		lcd_comm_out((g_lcd_t*)lcd_obj,INIT_4LINES_STEP_3);
 34a:	68 e2       	ldi	r22, 0x28	; 40
 34c:	c5 01       	movw	r24, r10
 34e:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_comm_out>

lcd_return_types lcd_init(	g_lcd_t* lcd_obj,	 gpio_bases data_port,	beginning_of_data_pins	data_pins_beginning,
							gpio_bases comm_port,gpio_pin_no RS_pin,    gpio_pin_no RW_pin,gpio_pin_no E_pin
						 )
{
	lcd_return_types ret_val=NO_LCD_ERRORS;
 352:	80 e0       	ldi	r24, 0x00	; 0
		{
			set_pin_output((gpio_bases *)lcd_obj->obj_data_port,data_pins_beginning+i);
		}
		lcd_comm_out((g_lcd_t*) lcd_obj,INIT_4LINES_STEP_1);
		lcd_comm_out((g_lcd_t*)lcd_obj,INIT_4LINES_STEP_2);
		lcd_comm_out((g_lcd_t*)lcd_obj,INIT_4LINES_STEP_3);
 354:	0d c0       	rjmp	.+26     	; 0x370 <lcd_init+0xe8>
		#error "invalid number of data lines.it can be 4 or 8 otherwise error"
		#endif
	} 
	else
	{
		ret_val=INVALID_LCD_PARAMS;
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	0b c0       	rjmp	.+22     	; 0x370 <lcd_init+0xe8>
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	09 c0       	rjmp	.+18     	; 0x370 <lcd_init+0xe8>
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	07 c0       	rjmp	.+14     	; 0x370 <lcd_init+0xe8>
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	05 c0       	rjmp	.+10     	; 0x370 <lcd_init+0xe8>
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	03 c0       	rjmp	.+6      	; 0x370 <lcd_init+0xe8>
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	01 c0       	rjmp	.+2      	; 0x370 <lcd_init+0xe8>
		#if NO_OF_DATA_LINES == 4
		//4bits mode
		if ( (data_pins_beginning < PORT_PIN_ZERO) || (data_pins_beginning > PORT_PIN_FOUR) )
		{
			ret_val=INVALID_LCD_PARAMS;
			return ret_val;
 36e:	81 e0       	ldi	r24, 0x01	; 1
	{
		ret_val=INVALID_LCD_PARAMS;
	}
	
	return ret_val;
}
 370:	cf 91       	pop	r28
 372:	0f 91       	pop	r16
 374:	ef 90       	pop	r14
 376:	cf 90       	pop	r12
 378:	bf 90       	pop	r11
 37a:	af 90       	pop	r10
 37c:	08 95       	ret

0000037e <lcd_data_out>:
	return ret_val;
}


lcd_return_types lcd_data_out(g_lcd_t* lcd_obj,msa_u8 lcd_data)
{
 37e:	1f 93       	push	r17
 380:	cf 93       	push	r28
 382:	df 93       	push	r29
	lcd_return_types ret_val=NO_LCD_ERRORS;
	if( lcd_obj != NULL)
 384:	00 97       	sbiw	r24, 0x00	; 0
 386:	09 f4       	brne	.+2      	; 0x38a <lcd_data_out+0xc>
 388:	b5 c0       	rjmp	.+362    	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
	{
		if (lcd_obj->obj_device_state != INITIATED)
 38a:	fc 01       	movw	r30, r24
 38c:	26 81       	ldd	r18, Z+6	; 0x06
 38e:	21 30       	cpi	r18, 0x01	; 1
 390:	09 f0       	breq	.+2      	; 0x394 <lcd_data_out+0x16>
 392:	b2 c0       	rjmp	.+356    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
 394:	16 2f       	mov	r17, r22
 396:	ec 01       	movw	r28, r24
		{
			ret_val=DEVICE_NOT_INITIATED;
			return ret_val;
		}
		set_pin_high((gpio_bases *)lcd_obj->obj_comm_port,lcd_obj->obj_RS_pin);
 398:	82 81       	ldd	r24, Z+2	; 0x02
 39a:	63 81       	ldd	r22, Z+3	; 0x03
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	0e 94 71 00 	call	0xe2	; 0xe2 <set_pin_high>
		#if NO_OF_DATA_LINES == 4
		//4bits mode>>>many if statements i know but this is to reduce the repetition of the high to low pulse and the delay and so on>>>then it's for optimization
		DATA_TEMP =lcd_data;
 3a2:	10 93 60 00 	sts	0x0060, r17	; 0x800060 <_edata>
		if (lcd_obj->obj_data_pins_beginning == PORT_PIN_FOUR)
 3a6:	89 81       	ldd	r24, Y+1	; 0x01
 3a8:	84 30       	cpi	r24, 0x04	; 4
 3aa:	61 f4       	brne	.+24     	; 0x3c4 <lcd_data_out+0x46>
		{
			//the high nipple
			PORTX= ((PORTX & 0x0f) | ((msa_u8)lcd_data & 0xf0));
 3ac:	e8 81       	ld	r30, Y
 3ae:	f0 e0       	ldi	r31, 0x00	; 0
 3b0:	62 81       	ldd	r22, Z+2	; 0x02
 3b2:	86 2f       	mov	r24, r22
 3b4:	8f 70       	andi	r24, 0x0F	; 15
 3b6:	61 2f       	mov	r22, r17
 3b8:	60 7f       	andi	r22, 0xF0	; 240
 3ba:	68 2b       	or	r22, r24
 3bc:	62 83       	std	Z+2, r22	; 0x02
			PORTA=0x55;
 3be:	85 e5       	ldi	r24, 0x55	; 85
 3c0:	8b bb       	out	0x1b, r24	; 27
 3c2:	33 c0       	rjmp	.+102    	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
		}
		else if (lcd_obj->obj_data_pins_beginning == PORT_PIN_THREE)
 3c4:	83 30       	cpi	r24, 0x03	; 3
 3c6:	51 f4       	brne	.+20     	; 0x3dc <lcd_data_out+0x5e>
		{
			//the high nipple
			PORTX= ((PORTX & 0x87) | ( (lcd_data & 0xf0) >> 1 ));
 3c8:	e8 81       	ld	r30, Y
 3ca:	f0 e0       	ldi	r31, 0x00	; 0
 3cc:	82 81       	ldd	r24, Z+2	; 0x02
 3ce:	61 2f       	mov	r22, r17
 3d0:	60 7f       	andi	r22, 0xF0	; 240
 3d2:	66 95       	lsr	r22
 3d4:	87 78       	andi	r24, 0x87	; 135
 3d6:	68 2b       	or	r22, r24
 3d8:	62 83       	std	Z+2, r22	; 0x02
 3da:	27 c0       	rjmp	.+78     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
		}
		else if (lcd_obj->obj_data_pins_beginning == PORT_PIN_TWO)
 3dc:	82 30       	cpi	r24, 0x02	; 2
 3de:	59 f4       	brne	.+22     	; 0x3f6 <lcd_data_out+0x78>
		{
			//the high nipple
			PORTX= ((PORTX & 0xc3) | ( (lcd_data & 0xf0) >> 2 ));
 3e0:	e8 81       	ld	r30, Y
 3e2:	f0 e0       	ldi	r31, 0x00	; 0
 3e4:	82 81       	ldd	r24, Z+2	; 0x02
 3e6:	61 2f       	mov	r22, r17
 3e8:	60 7f       	andi	r22, 0xF0	; 240
 3ea:	66 95       	lsr	r22
 3ec:	66 95       	lsr	r22
 3ee:	83 7c       	andi	r24, 0xC3	; 195
 3f0:	68 2b       	or	r22, r24
 3f2:	62 83       	std	Z+2, r22	; 0x02
 3f4:	1a c0       	rjmp	.+52     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
		}
		else if (lcd_obj->obj_data_pins_beginning == PORT_PIN_ONE)
 3f6:	81 30       	cpi	r24, 0x01	; 1
 3f8:	61 f4       	brne	.+24     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
		{
			//the high nipple
			PORTX= ((PORTX & 0xe1) | ( (lcd_data & 0xf0) >> 3 ));
 3fa:	e8 81       	ld	r30, Y
 3fc:	f0 e0       	ldi	r31, 0x00	; 0
 3fe:	82 81       	ldd	r24, Z+2	; 0x02
 400:	61 2f       	mov	r22, r17
 402:	60 7f       	andi	r22, 0xF0	; 240
 404:	66 95       	lsr	r22
 406:	66 95       	lsr	r22
 408:	66 95       	lsr	r22
 40a:	81 7e       	andi	r24, 0xE1	; 225
 40c:	86 2b       	or	r24, r22
 40e:	82 83       	std	Z+2, r24	; 0x02
 410:	0c c0       	rjmp	.+24     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
		}
		else if (lcd_obj->obj_data_pins_beginning == PORT_PIN_ZERO)
 412:	81 11       	cpse	r24, r1
 414:	0a c0       	rjmp	.+20     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
		{
			//the high nipple
			PORTX= ((PORTX & 0xf0) | ( lcd_data >> 4));
 416:	e8 81       	ld	r30, Y
 418:	f0 e0       	ldi	r31, 0x00	; 0
 41a:	62 81       	ldd	r22, Z+2	; 0x02
 41c:	86 2f       	mov	r24, r22
 41e:	80 7f       	andi	r24, 0xF0	; 240
 420:	61 2f       	mov	r22, r17
 422:	62 95       	swap	r22
 424:	6f 70       	andi	r22, 0x0F	; 15
 426:	68 2b       	or	r22, r24
 428:	62 83       	std	Z+2, r22	; 0x02
		}
		
		//a high to low pulse to make tthe lcd latch the data in
		set_pin_high((gpio_bases *)lcd_obj->obj_comm_port,lcd_obj->obj_E_pin);
 42a:	8a 81       	ldd	r24, Y+2	; 0x02
 42c:	6d 81       	ldd	r22, Y+5	; 0x05
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	0e 94 71 00 	call	0xe2	; 0xe2 <set_pin_high>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 434:	00 00       	nop
		_delay_us(1);
		set_pin_low((gpio_bases *)lcd_obj->obj_comm_port,lcd_obj->obj_E_pin);
 436:	8a 81       	ldd	r24, Y+2	; 0x02
 438:	6d 81       	ldd	r22, Y+5	; 0x05
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	0e 94 57 00 	call	0xae	; 0xae <set_pin_low>
		
		lcd_data=DATA_TEMP ;
 440:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <_edata>
 444:	f6 e0       	ldi	r31, 0x06	; 6
 446:	fa 95       	dec	r31
 448:	f1 f7       	brne	.-4      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 44a:	00 c0       	rjmp	.+0      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
		_delay_us(20);
		
		
		if (lcd_obj->obj_data_pins_beginning == PORT_PIN_FOUR)
 44c:	89 81       	ldd	r24, Y+1	; 0x01
 44e:	84 30       	cpi	r24, 0x04	; 4
 450:	71 f4       	brne	.+28     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
		{
			//the low nipple
			PORTX= ( (PORTX & 0x0f) | ((lcd_data&0x0f)<<4) );
 452:	e8 81       	ld	r30, Y
 454:	f0 e0       	ldi	r31, 0x00	; 0
 456:	82 81       	ldd	r24, Z+2	; 0x02
 458:	28 2f       	mov	r18, r24
 45a:	2f 70       	andi	r18, 0x0F	; 15
 45c:	30 e1       	ldi	r19, 0x10	; 16
 45e:	93 9f       	mul	r25, r19
 460:	c0 01       	movw	r24, r0
 462:	11 24       	eor	r1, r1
 464:	82 2b       	or	r24, r18
 466:	82 83       	std	Z+2, r24	; 0x02
			PORTA=0xff;
 468:	8f ef       	ldi	r24, 0xFF	; 255
 46a:	8b bb       	out	0x1b, r24	; 27
 46c:	33 c0       	rjmp	.+102    	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
		}
		else if (lcd_obj->obj_data_pins_beginning == PORT_PIN_THREE)
 46e:	83 30       	cpi	r24, 0x03	; 3
 470:	69 f4       	brne	.+26     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
		{
			//the low nipple
			PORTX= ( (PORTX & 0x87) | ((lcd_data & 0x0f)<<3) );
 472:	e8 81       	ld	r30, Y
 474:	f0 e0       	ldi	r31, 0x00	; 0
 476:	22 81       	ldd	r18, Z+2	; 0x02
 478:	89 2f       	mov	r24, r25
 47a:	8f 70       	andi	r24, 0x0F	; 15
 47c:	88 0f       	add	r24, r24
 47e:	88 0f       	add	r24, r24
 480:	88 0f       	add	r24, r24
 482:	92 2f       	mov	r25, r18
 484:	97 78       	andi	r25, 0x87	; 135
 486:	89 2b       	or	r24, r25
 488:	82 83       	std	Z+2, r24	; 0x02
 48a:	24 c0       	rjmp	.+72     	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
		}
		else if (lcd_obj->obj_data_pins_beginning == PORT_PIN_TWO)
 48c:	82 30       	cpi	r24, 0x02	; 2
 48e:	61 f4       	brne	.+24     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
		{
			//the low nipple
			PORTX= ( (PORTX & 0xc3) | ((lcd_data & 0x0f)<<2) );
 490:	e8 81       	ld	r30, Y
 492:	f0 e0       	ldi	r31, 0x00	; 0
 494:	22 81       	ldd	r18, Z+2	; 0x02
 496:	89 2f       	mov	r24, r25
 498:	8f 70       	andi	r24, 0x0F	; 15
 49a:	88 0f       	add	r24, r24
 49c:	88 0f       	add	r24, r24
 49e:	92 2f       	mov	r25, r18
 4a0:	93 7c       	andi	r25, 0xC3	; 195
 4a2:	89 2b       	or	r24, r25
 4a4:	82 83       	std	Z+2, r24	; 0x02
 4a6:	16 c0       	rjmp	.+44     	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
		}
		else if (lcd_obj->obj_data_pins_beginning == PORT_PIN_ONE)
 4a8:	81 30       	cpi	r24, 0x01	; 1
 4aa:	59 f4       	brne	.+22     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
		{
			//the low nipple
			PORTX= ( (PORTX & 0xe1) | ((lcd_data & 0x0f)<<1) );
 4ac:	e8 81       	ld	r30, Y
 4ae:	f0 e0       	ldi	r31, 0x00	; 0
 4b0:	22 81       	ldd	r18, Z+2	; 0x02
 4b2:	89 2f       	mov	r24, r25
 4b4:	8f 70       	andi	r24, 0x0F	; 15
 4b6:	88 0f       	add	r24, r24
 4b8:	92 2f       	mov	r25, r18
 4ba:	91 7e       	andi	r25, 0xE1	; 225
 4bc:	89 2b       	or	r24, r25
 4be:	82 83       	std	Z+2, r24	; 0x02
 4c0:	09 c0       	rjmp	.+18     	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
		}
		else									    //PORT_PIN_ZERO
		{
			//the low nipple
			PORTX= ( (PORTX & 0xf0) | (lcd_data  & 0x0f) );
 4c2:	e8 81       	ld	r30, Y
 4c4:	f0 e0       	ldi	r31, 0x00	; 0
 4c6:	82 81       	ldd	r24, Z+2	; 0x02
 4c8:	28 2f       	mov	r18, r24
 4ca:	20 7f       	andi	r18, 0xF0	; 240
 4cc:	89 2f       	mov	r24, r25
 4ce:	8f 70       	andi	r24, 0x0F	; 15
 4d0:	82 2b       	or	r24, r18
 4d2:	82 83       	std	Z+2, r24	; 0x02
		
		#error "invalid number of data lines.it can be 4 or 8 otherwise error"
		#endif
		
		//a high to low pulse to make tthe lcd latch the data in
		set_pin_high((gpio_bases *)lcd_obj->obj_comm_port,lcd_obj->obj_E_pin);
 4d4:	8a 81       	ldd	r24, Y+2	; 0x02
 4d6:	6d 81       	ldd	r22, Y+5	; 0x05
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	0e 94 71 00 	call	0xe2	; 0xe2 <set_pin_high>
 4de:	00 00       	nop
		_delay_us(1);
		set_pin_low((gpio_bases *)lcd_obj->obj_comm_port,lcd_obj->obj_E_pin);
 4e0:	8a 81       	ldd	r24, Y+2	; 0x02
 4e2:	6d 81       	ldd	r22, Y+5	; 0x05
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	0e 94 57 00 	call	0xae	; 0xae <set_pin_low>
 4ea:	88 e2       	ldi	r24, 0x28	; 40
 4ec:	8a 95       	dec	r24
 4ee:	f1 f7       	brne	.-4      	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
}


lcd_return_types lcd_data_out(g_lcd_t* lcd_obj,msa_u8 lcd_data)
{
	lcd_return_types ret_val=NO_LCD_ERRORS;
 4f0:	80 e0       	ldi	r24, 0x00	; 0
 4f2:	03 c0       	rjmp	.+6      	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
		
		_delay_us(120);
	}
	else
	{
		ret_val=INVALID_LCD_PARAMS;
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	01 c0       	rjmp	.+2      	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
	if( lcd_obj != NULL)
	{
		if (lcd_obj->obj_device_state != INITIATED)
		{
			ret_val=DEVICE_NOT_INITIATED;
			return ret_val;
 4f8:	82 e0       	ldi	r24, 0x02	; 2
	else
	{
		ret_val=INVALID_LCD_PARAMS;
	}
return ret_val;
}
 4fa:	df 91       	pop	r29
 4fc:	cf 91       	pop	r28
 4fe:	1f 91       	pop	r17
 500:	08 95       	ret

00000502 <main>:
lcd_return_types lcd_comm_out(g_lcd_t* lcd_obj,lcd_commands_t lcd_command);
lcd_return_types lcd_goto_xy(g_lcd_t* lcd_obj,msa_u8 lcd_x,msa_u8 lcd_y);
lcd_return_types lcd_deinit(g_lcd_t* lcd_obj);
*/
int main(void)
{
 502:	cf 93       	push	r28
 504:	df 93       	push	r29
 506:	cd b7       	in	r28, 0x3d	; 61
 508:	de b7       	in	r29, 0x3e	; 62
 50a:	27 97       	sbiw	r28, 0x07	; 7
 50c:	0f b6       	in	r0, 0x3f	; 63
 50e:	f8 94       	cli
 510:	de bf       	out	0x3e, r29	; 62
 512:	0f be       	out	0x3f, r0	; 63
 514:	cd bf       	out	0x3d, r28	; 61
	g_lcd_t lcd_obj_1;
	lcd_init(&lcd_obj_1,BASE_D,PORT_PIN_FOUR,BASE_C,PIN_TWO,PIN_THREE,PIN_FOUR);
 516:	68 94       	set
 518:	cc 24       	eor	r12, r12
 51a:	c2 f8       	bld	r12, 2
 51c:	0f 2e       	mov	r0, r31
 51e:	f3 e0       	ldi	r31, 0x03	; 3
 520:	ef 2e       	mov	r14, r31
 522:	f0 2d       	mov	r31, r0
 524:	02 e0       	ldi	r16, 0x02	; 2
 526:	23 e3       	ldi	r18, 0x33	; 51
 528:	44 e0       	ldi	r20, 0x04	; 4
 52a:	60 e3       	ldi	r22, 0x30	; 48
 52c:	ce 01       	movw	r24, r28
 52e:	01 96       	adiw	r24, 0x01	; 1
 530:	0e 94 44 01 	call	0x288	; 0x288 <lcd_init>
	msa_u8 lcd_array_data[13]="Mahmoud Saad";
	
    while (1) 
    {
	    lcd_data_out(&lcd_obj_1,'M');
 534:	6d e4       	ldi	r22, 0x4D	; 77
 536:	ce 01       	movw	r24, r28
 538:	01 96       	adiw	r24, 0x01	; 1
 53a:	0e 94 bf 01 	call	0x37e	; 0x37e <lcd_data_out>
	    PORTD|=0x0f;
 53e:	82 b3       	in	r24, 0x12	; 18
 540:	8f 60       	ori	r24, 0x0F	; 15
 542:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 544:	2f e9       	ldi	r18, 0x9F	; 159
 546:	86 e8       	ldi	r24, 0x86	; 134
 548:	91 e0       	ldi	r25, 0x01	; 1
 54a:	21 50       	subi	r18, 0x01	; 1
 54c:	80 40       	sbci	r24, 0x00	; 0
 54e:	90 40       	sbci	r25, 0x00	; 0
 550:	e1 f7       	brne	.-8      	; 0x54a <main+0x48>
 552:	00 c0       	rjmp	.+0      	; 0x554 <main+0x52>
 554:	00 00       	nop
		_delay_ms(500);
		PORTD &= 0xf0;
 556:	82 b3       	in	r24, 0x12	; 18
 558:	80 7f       	andi	r24, 0xF0	; 240
 55a:	82 bb       	out	0x12, r24	; 18
 55c:	2f e9       	ldi	r18, 0x9F	; 159
 55e:	86 e8       	ldi	r24, 0x86	; 134
 560:	91 e0       	ldi	r25, 0x01	; 1
 562:	21 50       	subi	r18, 0x01	; 1
 564:	80 40       	sbci	r24, 0x00	; 0
 566:	90 40       	sbci	r25, 0x00	; 0
 568:	e1 f7       	brne	.-8      	; 0x562 <main+0x60>
 56a:	00 c0       	rjmp	.+0      	; 0x56c <main+0x6a>
 56c:	00 00       	nop
 56e:	e2 cf       	rjmp	.-60     	; 0x534 <main+0x32>

00000570 <_exit>:
 570:	f8 94       	cli

00000572 <__stop_program>:
 572:	ff cf       	rjmp	.-2      	; 0x572 <__stop_program>
